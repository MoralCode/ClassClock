{"version":3,"sources":["serviceWorker.ts","store/schools/types.ts","store/schools/reducer.ts","utils/enums.ts","@types/time.ts","utils/helpers.tsx","@types/classperiod.ts","@types/bellschedule.ts","@types/school.ts","utils/typetransform.ts","store/usersettings/types.ts","store/usersettings/reducer.ts","store/store.ts","react-auth0-wrapper.tsx","utils/constants.ts","components/Link.tsx","components/Block/Block.tsx","pages/App.tsx","pages/Schedule.tsx","services/classclock.ts","store/schools/actions.ts","pages/Settings.tsx","store/usersettings/actions.ts","components/PrivateRoute.tsx","pages/SchoolSelect/SchoolSelect.tsx","components/Calendar/Calendar.tsx","pages/Admin.tsx","utils/routes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","RECEIVE_SCHOOL","FETCH_ERROR","SELECT_SCHOOL","INVALIDATE_SCHOOL","selectedSchoolReducer","state","arguments","length","undefined","isFetching","data","action","type","Object","assign","school","lastUpdated","receivedAt","fetchErrorReducer","message","TimeStates","TimeComparisons","Time","hours","minutes","seconds","classCallCheck","this","Math","abs","milliseconds","floor","date","getHours","getMinutes","getSeconds","time","parts","split","parseInt","otherTime","fromMilliseconds","getMillisecondsTo","excludeSeconds","stringified","toString","padStart","use24HourTime","ending","isAM","getValueIfKeyInList","list","object","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","key","value","hasOwnProperty","err","return","deconstructJsonApiResource","json","objectSpread","id","links","endpoint","self","attributes","getCurrentDate","Date","sortClassesByStartTime","classes","sort","a","b","getStartTime","checkTimeRange","checkTime","startTime","endTime","startCheck","endCheck","IS_BEFORE","IS_AFTER","IS_DURING_OR_EXACTLY","ClassPeriod","name","creationDate","start","end","fromString","getTimeDeltaTo","BellSchedule","dates","lastUpdatedDate","displayName","map","parse","meetingTime","fromJson","getTime","classPeriod","stateForTime","School","ownerId","fullName","acronym","timeZone","schedules","passingPeriodName","schedule","getDates","d","toDateString","includes","currentTime","fromDate","currentSchedule","getScheduleForDate","getAllClasses","numberOfClasses","getEndTime","SchoolTransform","createTransform","inboundState","selectedSchool","JSON","stringify","outboundState","whitelist","SET_TIME_FORMAT","userSettingsReducer","persistConfig","storage","transforms","blacklist","DEFAULT_REDIRECT_CALLBACK","history","replaceState","document","title","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","_ref","children","_ref$onRedirectCallba","onRedirectCallback","initOptions","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","isAuthenticated","setIsAuthenticated","_useState3","_useState4","user","setUser","_useState5","_useState6","auth0Client","setAuth0","_useState7","_useState8","loading","setLoading","_useState9","_useState10","popupOpen","setPopupOpen","useEffect","_ref2","asyncToGenerator","regenerator_default","mark","_callee","auth0FromHook","_ref3","appState","_user","wrap","_context","prev","createAuth0Client","sent","search","handleRedirectCallback","getUser","stop","apply","initAuth0","loginWithPopup","_ref4","_callee2","o","_context2","t0","console","error","finish","_x","_ref5","_callee3","result","_context3","abrupt","react_default","createElement","Provider","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","Auth0","domain","clientId","audience","pages","URLs","Link","className","props","style","cursor","href","destination","onClick","Component","Block","connect","currentDate","setDate","navigate","to","dispatch","push","interval","setInterval","clearInterval","content","Fragment","nextImportantInfo","currentBellSchedule","i","_i","_arr","getNextImportantInfo","nextClass","nextImportantTime","currentClass","getClassPeriodForTime","Block_Block_Block","Link_Link","getName","fontSize","getPassingTimeName","getFormattedString","index_es","icon","faCog","toLocaleDateString","weekday","year","month","day","faHome","ClassClockService","selectSchool","schoolId","validateResponse","getSchool","getSchedulesListForSchool","Promise","all","then","_result","schoolResult","scheduleResult","scheduleDataList","scheduleId","scheduleRequest","getDetailedScheduleForSchool","schedulesList","now","baseURL","getSchoolsList","params","fetch","getHeaders","_callee4","_context4","_callee5","call","_context5","response","ok","log","method","authToken","parameters","Authorization","headers","Headers","Accept","userSettings","_useAuth","email","faSignOutAlt","getOwnerIdentifier","sub","format","getIdentifier","checked","onChange","marginTop","faGithub","faTwitter","faInstagram","PrivateRoute","component","path","targetUrl","fn","schoolList","setSchoolList","lastRefresh","setlastRefresh","controller","AbortController","signal","abortSignal","fetchSchools","abort","getAcronym","Calendar","currentMonth","setCurrentMonth","initialOptions","_Object$keys","keys","options","selectedDates","setSelectedDates","config","weekStartsOn","startDate","dateFns","startOfWeek","startOfMonth","endDate","endOfWeek","endOfMonth","onDateClick","event","dateValue","currentTarget","dataset","isValidDate","getNextOptionForDate","setOptionForDate","getGroupAndPositionForDate","currentOptionKey","optionKeys","indexOf","option","_location","optionKey","posInOption","updatedSelections","removeDateFromSelectionList","addDateToSelectionList","_location2","isNaN","datesSelected","updatedGroup","concat","toConsumableArray","index","slice","indexInGroup","colSpan","subMonths","faChevronLeft","addMonths","faChevronRight","dayNames","addDays","getWeekdayNameHeaders","monthGrid","tempRowData","dateIndex","differenceInDays","firstDayOfWeek","firstDayOfWeekTomorrow","color","backgroundColor","getMonth","data-date","getDate","isEqual","getMonthGrid","getRandomHtmlColor","random","scheduleOptions","getSchedules","optionProps","getScheduleOptions","components_Calendar_Calendar","listStyleType","margin","padding","routes","pages_App","pages_Schedule","pages_Settings","pages_SchoolSelect_SchoolSelect","components_PrivateRoute","Admin","createBrowserHistory","configuredStore","hist","initialState","rootReducer","combineReducers","router","routerReducer","persistedReducer","persistReducer","store","createStore","applyMiddleware","logger","routerMiddleware","thunk","persistor","persistStore","configureStore","startListener","UniversalRouter","hash","replace","render","resolve","ReactDOM","react_redux_es","integration_react","react_auth0_wrapper_Auth0Provider","client_id","redirect_uri","getElementById","currentLocation","getState","subscribe","previousLocation","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b08d114.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import School from \"../../@types/school\";\n\n//API actions\nexport const REQUEST_SCHOOL = \"FETCH_SCHOOL\";\nexport const RECEIVE_SCHOOL = \"RECEIVE_SCHOOL\";\n\nexport const FETCH_ERROR = \"FETCH_ERROR\";\n\n// UI actions\nexport const SELECT_SCHOOL = \"SELECT_SCHOOL\";\nexport const INVALIDATE_SCHOOL = \"INVALIDATE_SCHOOL\";\n\nexport interface IState {\n    selectedSchool: {\n        isFetching: boolean;\n        didInvalidate: false;\n        data: School;\n    };\n}\n\ninterface ISelectSchoolAction {\n    type: typeof SELECT_SCHOOL;\n}\n\ninterface IReceiveSchoolAction {\n    type: typeof RECEIVE_SCHOOL;\n    school: School;\n    receivedAt: number;\n}\n\ninterface IRequestSchoolAction {\n    type: typeof REQUEST_SCHOOL;\n}\n\ninterface IInvalidateSchoolAction {\n    type: typeof INVALIDATE_SCHOOL;\n}\n\ninterface IFetchErrorAction {\n    type: typeof FETCH_ERROR;\n    message: string;\n}\n\n// interface DeleteMessageAction {\n//     type: typeof DELETE_MESSAGE;\n//     meta: {\n//         timestamp: number;\n//     };\n// }\n\nexport type SchoolActionTypes =\n    | ISelectSchoolAction\n    | IReceiveSchoolAction\n    | IRequestSchoolAction\n    | IInvalidateSchoolAction\n    | IFetchErrorAction;\n// | IReceiveSchoolsAction; // | DeleteMessageAction;\n","import {\n    SELECT_SCHOOL,\n    SchoolActionTypes,\n    FETCH_ERROR,\n    RECEIVE_SCHOOL,\n    INVALIDATE_SCHOOL\n    // ISchoolsByIdState\n} from \"./types\";\nimport School from \"../../@types/school\";\n\nexport function selectedSchoolReducer(\n    state = {\n        isFetching: false,\n        data: {}\n    },\n    action: SchoolActionTypes\n) {\n    switch (action.type) {\n        case SELECT_SCHOOL:\n            return Object.assign({}, state, {\n                isFetching: true\n            });\n\n        case RECEIVE_SCHOOL:\n            return Object.assign({}, state, {\n                isFetching: false,\n                data: action.school,\n                lastUpdated: action.receivedAt\n            });\n\n        case INVALIDATE_SCHOOL:\n            return Object.assign({}, state, {\n                isFetching: false,\n                data: {}\n            });\n\n        default:\n            return state;\n    }\n}\n\nexport function fetchErrorReducer(state = {}, action: SchoolActionTypes) {\n    if (action.type === FETCH_ERROR) {\n        return action.message;\n    } else {\n        return state;\n    }\n}\n","export enum TimeStates {\n    DAY_OFF = \"day off\",\n    OUTSIDE_SCHOOL_HOURS = \"outside school hours\",\n    SCHOOL_IN_CLASS_OUT = \"school is in session, but class is not\",\n    CLASS_IN_SESSION = \"class is in session\"\n}\n\nexport enum TimeComparisons {\n    IS_BEFORE = -1, //\"before\",\n    IS_DURING_OR_EXACTLY = 0, //\"during/exactly\",\n    IS_AFTER = 1 //\"after\"\n}\n","export default class Time {\n    public static fromMilliseconds(milliseconds: number): Time {\n        const hours = Math.floor(milliseconds / 1000 / 60 / 60);\n        milliseconds -= hours * 1000 * 60 * 60;\n        const minutes = Math.floor(milliseconds / 1000 / 60);\n        milliseconds -= minutes * 1000 * 60;\n        const seconds = Math.floor(milliseconds / 1000);\n        milliseconds -= seconds * 1000;\n\n        return new Time(hours, minutes, seconds);\n    }\n\n    public static fromDate(date: Date) {\n        return new Time(date.getHours(), date.getMinutes(), date.getSeconds());\n    }\n\n    public static fromString(time: string) {\n        const parts = time.split(\":\");\n        if (parts.length < 2 || parts.length > 3) {\n            //error\n        }\n        return new Time(\n            parseInt(parts[0], 10),\n            parseInt(parts[1], 10),\n            parts.length === 3 ? parseInt(parts[2], 10) : undefined\n        );\n    }\n\n    private hours: number;\n    private minutes: number;\n    private seconds: number;\n\n    constructor(hours: number, minutes: number, seconds?: number) {\n        this.hours = Math.abs(hours % 24);\n        this.minutes = Math.abs(minutes % 60);\n        this.seconds = Math.abs(seconds || 0 % 60);\n    }\n\n    public getHours() {\n        return this.hours;\n    }\n    public getMinutes() {\n        return this.minutes;\n    }\n    public getSeconds() {\n        return this.seconds;\n    }\n    public getMillisecondsTo(otherTime: Time) {\n        const hoursDiff = otherTime.getHours() - this.hours;\n        const minutesDiff = otherTime.getMinutes() - this.minutes;\n        const secondsDiff = otherTime.getSeconds() - this.seconds;\n\n        return hoursDiff * 60 * 60 * 1000 + minutesDiff * 60 * 1000 + secondsDiff * 1000;\n    }\n    public getTimeDeltaTo(otherTime: Time) {\n        return Time.fromMilliseconds(Math.abs(this.getMillisecondsTo(otherTime)));\n    }\n\n    public toString(excludeSeconds = false, use24HourTime = false) {\n        const hours = use24HourTime ? this.hours % 12 : this.hours;\n\n        let stringified =\n            this.hours.toString().padStart(2, \"0\") +\n            \":\" +\n            this.minutes.toString().padStart(2, \"0\");\n\n        if (!excludeSeconds) {\n            stringified += \":\" + this.seconds.toString().padStart(2, \"0\");\n        }\n\n        return stringified;\n    }\n\n    public isAM() {\n        return this.hours < 12 && this.minutes < 60 && this.seconds < 60;\n    }\n\n    public getFormattedString(excludeSeconds = false, use24HourTime = false) {\n        const ending = this.isAM() ? \" AM\" : \" PM\";\n        return this.toString(excludeSeconds) + (use24HourTime ? ending : \"\");\n    }\n\n    //this overrides the automatic serialization of Time Objects and makes them return a string and not a plain object (which is more annoying to parse back in and rwould require an extra factory method)\n    public toJSON() {\n        return this.toString();\n    }\n}\n","import Time from \"../@types/time\";\nimport School from \"../@types/school\";\nimport { TimeComparisons, TimeStates } from \"./enums\";\nimport ClassPeriod from \"../@types/classperiod\";\nimport BellSchedule from \"../@types/bellschedule\";\n\nexport function getValueIfKeyInList(list: string[], object: any) {\n    for (const key of list) {\n        if (object.hasOwnProperty(key)) {\n            return object[key];\n        }\n    }\n}\n\n//resource object\nexport function deconstructJsonApiResource(json: any) {\n    const data = {\n        type: json.type,\n        id: json.id,\n        ...(json.links !== undefined && {\n            endpoint: json.links.self\n        })\n    };\n    return Object.assign({}, data, json.attributes);\n}\n\nexport function getCurrentDate() {\n    return new Date();\n}\n\nexport function sortClassesByStartTime(classes: ClassPeriod[]) {\n    return classes.sort((a, b) => -a.getStartTime().getMillisecondsTo(b.getStartTime()));\n}\n\n/**\n * @returns a flag that represents the current chunk of time categorically\n */\nexport function getTimeStateForDateAtSchool(date: Date, school: School) {\n    const currentBellSchedule = school.getScheduleForDate(date);\n\n    //there is no schedule that applies today\n    if (!currentBellSchedule) {\n        return TimeStates.DAY_OFF;\n    }\n\n    const currentClassPeriod = currentBellSchedule.getClassPeriodForTime(\n        Time.fromDate(date)\n    );\n\n    //it is a school day but it is not school hours\n    if (!school.isInSession(date)) {\n        return TimeStates.OUTSIDE_SCHOOL_HOURS;\n    }\n\n    //the current time lies between the start of the first schedules class and the end of the last\n    else if (school.isInSession(date) && !currentClassPeriod) {\n        return TimeStates.SCHOOL_IN_CLASS_OUT;\n    }\n\n    //the current time lies within a scheduled class period\n    else if (currentClassPeriod !== undefined) {\n        return TimeStates.CLASS_IN_SESSION;\n    }\n}\n\n/**\n * @returns the next relevent time to count down to\n */\nexport function getNextImportantInfo(\n    date: Date,\n    school: School\n): [ClassPeriod, Time] | undefined {\n    const currentBellSchedule = school.getScheduleForDate(date);\n\n    //there is no schedule that applies today\n    if (!currentBellSchedule) {\n        return;\n    }\n\n    const classes = sortClassesByStartTime(currentBellSchedule.getAllClasses());\n    //loop through all classes in order until you get to the first time that has not passed\n    for (let i = 0; i < classes.length; i++) {\n        for (const time of [classes[i].getStartTime(), classes[i].getEndTime()]) {\n            if (Time.fromDate(date).getMillisecondsTo(time) >= 0) {\n                const nextClass =\n                    classes[i].stateForTime(Time.fromDate(date)) ===\n                    TimeComparisons.IS_DURING_OR_EXACTLY\n                        ? classes[i + 1]\n                        : classes[i];\n                return [nextClass, time];\n            }\n        }\n    }\n}\n\n/**\n * This export function checks if the current time is between the two given times\n * This is useful for checking which class period you are currently in or for checking if school is in session.\n *\n * @param {*} checkTime the time that the check results are returned for\n * @param {*} startTime the start time of the range to check\n * @param {*} endTimethe the end time of the range to check\n *\n * @returns -1 if checkTime is before range, 0 if checkTime is within range, 1 if checkTime is after range\n */\nexport function checkTimeRange(checkTime: Time, startTime: Time, endTime: Time) {\n    if (startTime.getMillisecondsTo(endTime) <= 0) {\n        //theres a problem\n    }\n    const startCheck = checkTime.getMillisecondsTo(startTime);\n    const endCheck = checkTime.getMillisecondsTo(endTime);\n\n    if (startCheck > 0 && endCheck > 0) {\n        return TimeComparisons.IS_BEFORE;\n    } else if (endCheck < 0 && endCheck < 0) {\n        return TimeComparisons.IS_AFTER;\n    } else {\n        return TimeComparisons.IS_DURING_OR_EXACTLY;\n    }\n}\n","import Time from \"./time\";\nimport { checkTimeRange, getValueIfKeyInList } from \"../utils/helpers\";\n\nexport default class ClassPeriod {\n    public static fromJson(json: any) {\n        const start = getValueIfKeyInList([\"startTime\", \"start_time\"], json);\n        const end = getValueIfKeyInList([\"endTime\", \"end_time\"], json);\n        return new ClassPeriod(\n            getValueIfKeyInList([\"name\", \"classPeriodName\", \"class_period_name\"], json),\n            start instanceof Time ? start : Time.fromString(start),\n            end instanceof Time ? end : Time.fromString(end),\n            new Date(getValueIfKeyInList([\"creationDate\", \"creation_date\"], json))\n        );\n    }\n    private name: string;\n    private startTime: Time;\n    private endTime: Time;\n    private creationDate: Date;\n\n    constructor(name: string, startTime: Time, endTime: Time, creationDate: Date) {\n        this.name = name;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.creationDate = creationDate;\n    }\n\n    public getName() {\n        return this.name;\n    }\n\n    public getStartTime() {\n        return this.startTime;\n    }\n\n    public getEndTime() {\n        return this.endTime;\n    }\n\n    public getDuration() {\n        return this.startTime.getTimeDeltaTo(this.endTime);\n    }\n\n    //remove me\n    public stateForTime(time: Time) {\n        return checkTimeRange(time, this.startTime, this.endTime);\n    }\n}\n","import ClassPeriod from \"./classperiod\";\nimport Time from \"./time\";\nimport { TimeComparisons } from \"../utils/enums\";\nimport { getValueIfKeyInList, sortClassesByStartTime } from \"../utils/helpers\";\nimport { parse } from \"date-fns\";\n\nexport default class BellSchedule {\n    public static fromJson(json: any) {\n        return new BellSchedule(\n            getValueIfKeyInList([\"id\", \"identifier\"], json),\n            getValueIfKeyInList([\"name\", \"full_name\", \"fullName\"], json),\n            getValueIfKeyInList([\"endpoint\"], json),\n            getValueIfKeyInList([\"dates\"], json).map((date: string) => parse(date)),\n            getValueIfKeyInList([\"classes\", \"meeting_times\"], json).map(\n                (meetingTime: any) => ClassPeriod.fromJson(meetingTime)\n            ),\n            getValueIfKeyInList([\"lastModified\", \"last_modified\"], json)\n            //display name\n        );\n    }\n\n    private id: string;\n    private name: string;\n    private endpoint: string;\n    private displayName?: string;\n    private dates: Date[];\n    private classes: ClassPeriod[];\n    private lastUpdatedDate: Date;\n\n    constructor(\n        id: string,\n        name: string,\n        endpoint: string,\n        dates: Date[],\n        classes: ClassPeriod[],\n        lastUpdatedDate: Date,\n        displayName?: string\n    ) {\n        this.id = id;\n        this.name = name;\n        this.endpoint = endpoint;\n        this.displayName = displayName;\n        this.dates = dates;\n        this.classes = classes;\n        this.lastUpdatedDate = lastUpdatedDate;\n    }\n\n    public getIdentifier() {\n        return this.id;\n    }\n\n    public getName() {\n        if (this.displayName) {\n            return this.displayName;\n        } else {\n            return this.name;\n        }\n    }\n\n    public getEndpoint() {\n        return this.endpoint;\n    }\n\n    public getDates() {\n        return this.dates;\n    }\n\n    public getAllClasses() {\n        return this.classes;\n    }\n\n    public numberOfClasses() {\n        return this.classes.length - 1;\n    }\n\n    public lastUpdated() {\n        return this.lastUpdatedDate;\n    }\n\n    public hasChangedSince(date: Date) {\n        return date.getTime() - this.lastUpdatedDate.getTime() > 0;\n    }\n\n    public getClassPeriodForTime(time: Time) {\n        for (const classPeriod of sortClassesByStartTime(this.classes)) {\n            if (classPeriod.stateForTime(time) === TimeComparisons.IS_DURING_OR_EXACTLY) {\n                return classPeriod;\n            }\n        }\n        return;\n    }\n}\n","import {\n    checkTimeRange,\n    deconstructJsonApiResource,\n    getValueIfKeyInList\n} from \"../utils/helpers\";\nimport Time from \"./time\";\nimport { TimeComparisons } from \"../utils/enums\";\nimport BellSchedule from \"./bellschedule\";\n\nexport default class School {\n    public static fromJson(json: any) {\n        const schedules = getValueIfKeyInList([\"schedules\"], json);\n        return new School(\n            getValueIfKeyInList([\"id\", \"identifier\"], json),\n            getValueIfKeyInList([\"ownerId\", \"owner_id\"], json),\n            getValueIfKeyInList([\"name\", \"fullName\", \"full_name\"], json),\n            getValueIfKeyInList([\"acronym\"], json),\n            getValueIfKeyInList([\"endpoint\"], json),\n            \"LA\",\n            schedules\n                ? schedules.map((schedule: any) => BellSchedule.fromJson(schedule))\n                : undefined,\n            getValueIfKeyInList([\"alternate_freeperiod_name\", \"passingPeriodName\"], json),\n            getValueIfKeyInList([\"creation_date\", \"creationDate\"], json),\n            getValueIfKeyInList([\"last_modified\", \"lastModified\"], json)\n        );\n    }\n\n    private id: string;\n    private ownerId: string;\n    private endpoint?: string;\n    private fullName: string;\n    private acronym: string;\n    private timeZone?: string;\n    private schedules?: BellSchedule[];\n    private passingPeriodName?: string;\n    private creationDate?: Date;\n    private lastUpdatedDate?: Date;\n\n    constructor(\n        id: string,\n        ownerId: string,\n        fullName: string,\n        acronym: string,\n        endpoint: string,\n        timeZone?: string,\n        schedules?: BellSchedule[],\n        passingPeriodName?: string,\n        creationDate?: Date,\n        lastUpdatedDate?: Date\n    ) {\n        this.id = id;\n        this.ownerId = ownerId;\n        this.endpoint = endpoint;\n        this.fullName = fullName;\n        this.acronym = acronym;\n        this.timeZone = timeZone;\n        this.schedules = schedules;\n        this.passingPeriodName = passingPeriodName;\n        this.creationDate = creationDate;\n        this.lastUpdatedDate = lastUpdatedDate;\n    }\n\n    public getIdentifier(): string {\n        return this.id;\n    }\n\n    public getOwnerIdentifier(): string {\n        return this.ownerId;\n    }\n\n    public getEndpoint() {\n        return this.endpoint;\n    }\n\n    public getSchedules() {\n        return this.schedules;\n    }\n\n    public getName() {\n        return this.fullName;\n    }\n\n    public getAcronym() {\n        return this.acronym;\n    }\n\n    public getPassingTimeName() {\n        return this.passingPeriodName;\n    }\n\n    public getTimezone() {\n        return this.timeZone;\n    }\n\n    public getCreationDate() {\n        return this.creationDate;\n    }\n\n    public lastUpdated() {\n        return this.lastUpdated;\n    }\n\n    public hasChangedSince(date: Date) {\n        if (this.lastUpdatedDate !== undefined) {\n            return date.getTime() - this.lastUpdatedDate.getTime() > 0;\n        } else {\n            return undefined;\n        }\n    }\n\n    //can also be used as isNoSchoolDay() by checking for undefined\n    public getScheduleForDate(date: Date) {\n        if (this.schedules) {\n            for (const schedule of this.schedules) {\n                if (\n                    schedule\n                        .getDates()\n                        .map((d: Date) => d.toDateString())\n                        .includes(date.toDateString())\n                ) {\n                    return schedule;\n                }\n            }\n            return null; //no schedule today\n        }\n        return; // no schedules defined\n    }\n\n    //remove\n    public hasSchedules() {\n        return this.schedules !== undefined;\n    }\n\n    //change input to a time\n    public isInSession(date: Date) {\n        const currentTime = Time.fromDate(date);\n        const currentSchedule = this.getScheduleForDate(date);\n\n        if (!currentSchedule) {\n            return false;\n        }\n        return (\n            checkTimeRange(\n                currentTime,\n                currentSchedule.getAllClasses()[0].getStartTime(),\n                currentSchedule\n                    .getAllClasses()\n                    [currentSchedule.numberOfClasses()].getEndTime()\n            ) === TimeComparisons.IS_DURING_OR_EXACTLY\n        );\n    }\n}\n","import { createTransform } from \"redux-persist\";\nimport { IState } from \"../store/schools/types\";\nimport School from \"../@types/school\";\n\nconst SchoolTransform = createTransform(\n    // transform state on its way to being serialized and persisted.\n    (inboundState: IState, key: any) => {\n        // convert mySet to an Array.\n        return {\n            ...inboundState,\n            selectedSchool: JSON.stringify(inboundState.selectedSchool)\n        };\n    },\n    // transform state being rehydrated\n    (outboundState: any, key: any) => {\n        // convert mySet back to a Set.\n        return {\n            ...outboundState,\n            selectedSchool: School.fromJson(outboundState.selectedSchool)\n        };\n    },\n    // define which reducers this transform gets called for.\n    { whitelist: [\"selectedSchoolReducer\"] }\n);\n\nexport default SchoolTransform;\n","// UI actions\nexport const SET_TIME_FORMAT = \"SET_TIME_FORMAT\";\n\nexport interface IState {\n    userSettings: {\n        use24HourTime: boolean;\n    };\n}\n\ninterface ISetTimeFormatAction {\n    type: typeof SET_TIME_FORMAT;\n    use24HourTime: boolean;\n}\n\n// interface IReceiveSchoolAction {\n//     type: typeof RECEIVE_SCHOOL;\n//     school: School;\n//     receivedAt: number;\n// }\n\n// interface IRequestSchoolAction {\n//     type: typeof REQUEST_SCHOOL;\n// }\n\n// interface IFetchErrorAction {\n//     type: typeof FETCH_ERROR;\n//     message: string;\n// }\n\n// // interface DeleteMessageAction {\n// //     type: typeof DELETE_MESSAGE;\n// //     meta: {\n// //         timestamp: number;\n// //     };\n// // }\n\nexport type UserSettingActionTypes = ISetTimeFormatAction;\n","import { UserSettingActionTypes, SET_TIME_FORMAT } from \"./types\";\n\nexport function userSettingsReducer(\n    state = {\n        use24HourTime: false\n    },\n    action: UserSettingActionTypes\n) {\n    switch (action.type) {\n        case SET_TIME_FORMAT:\n            return Object.assign({}, state, {\n                use24HourTime: action.use24HourTime\n            });\n        default:\n            return state;\n    }\n}\n","import { combineReducers, applyMiddleware, createStore } from \"redux\";\nimport { routerReducer, routerMiddleware } from \"redux-first-routing\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport logger from \"redux-logger\";\n\nimport { selectedSchoolReducer, fetchErrorReducer } from \"./schools/reducer\";\nimport SchoolTransform from \"../utils/typetransform\";\nimport { userSettingsReducer } from \"./usersettings/reducer\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    transforms: [SchoolTransform],\n    blacklist: [\"router\", \"error\"]\n};\n\nexport const configureStore = (hist: any, initialState = {}) => {\n    // Add the reducer, which adds location state to the store\n    const rootReducer = combineReducers({\n        selectedSchool: selectedSchoolReducer,\n        userSettings: userSettingsReducer,\n        error: fetchErrorReducer,\n        router: routerReducer // Convention is to use the \"router\" property\n    });\n\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    // Create the store\n    const store = createStore(\n        persistedReducer,\n        initialState,\n        applyMiddleware(logger, routerMiddleware(hist), thunk)\n    );\n\n    const persistor = persistStore(store);\n    return { store, persistor };\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\nimport Auth0Client from \"@auth0/auth0-spa-js/dist/typings/Auth0Client\";\n\ninterface IAuth0Context {\n    isAuthenticated: boolean;\n    user: any;\n    loading: boolean;\n    popupOpen: boolean;\n    loginWithPopup(options: PopupLoginOptions): Promise<void>;\n    handleRedirectCallback(): Promise<RedirectLoginResult>;\n    getIdTokenClaims(o?: getIdTokenClaimsOptions): Promise<IdToken>;\n    loginWithRedirect(o: RedirectLoginOptions): Promise<void>;\n    getTokenSilently(o?: GetTokenSilentlyOptions): Promise<string | undefined>;\n    getTokenWithPopup(o?: GetTokenWithPopupOptions): Promise<string | undefined>;\n    logout(o?: LogoutOptions): void;\n}\ninterface IAuth0ProviderOptions {\n    children: React.ReactElement;\n    onRedirectCallback?(result: RedirectLoginResult): void;\n}\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n    window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext<IAuth0Context | null>(null);\nexport const useAuth0 = () => useContext(Auth0Context)!;\nexport const Auth0Provider = ({\n    children,\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n    ...initOptions\n}: IAuth0ProviderOptions & Auth0ClientOptions) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [user, setUser] = useState();\n    const [auth0Client, setAuth0] = useState<Auth0Client>();\n    const [loading, setLoading] = useState(true);\n    const [popupOpen, setPopupOpen] = useState(false);\n\n    useEffect(() => {\n        const initAuth0 = async () => {\n            const auth0FromHook = await createAuth0Client(initOptions);\n            setAuth0(auth0FromHook);\n\n            if (window.location.search.includes(\"code=\")) {\n                const { appState } = await auth0FromHook.handleRedirectCallback();\n                onRedirectCallback(appState);\n            }\n\n            const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n            setIsAuthenticated(isAuthenticated);\n\n            if (isAuthenticated) {\n                const user = await auth0FromHook.getUser();\n                setUser(user);\n            }\n\n            setLoading(false);\n        };\n        initAuth0();\n        // eslint-disable-next-line\n    }, []);\n\n    const loginWithPopup = async (o: PopupLoginOptions) => {\n        setPopupOpen(true);\n        try {\n            await auth0Client!.loginWithPopup(o);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setPopupOpen(false);\n        }\n        const user = await auth0Client!.getUser();\n        setUser(user);\n        setIsAuthenticated(true);\n    };\n\n    const handleRedirectCallback = async () => {\n        setLoading(true);\n        const result = await auth0Client!.handleRedirectCallback();\n        const user = await auth0Client!.getUser();\n        setLoading(false);\n        setIsAuthenticated(true);\n        setUser(user);\n        return result;\n    };\n    return (\n        <Auth0Context.Provider\n            value={{\n                isAuthenticated,\n                user,\n                loading,\n                popupOpen,\n                loginWithPopup,\n                handleRedirectCallback,\n                getIdTokenClaims: (o: getIdTokenClaimsOptions | undefined) =>\n                    auth0Client!.getIdTokenClaims(o),\n                loginWithRedirect: (o: RedirectLoginOptions) =>\n                    auth0Client!.loginWithRedirect(o),\n                getTokenSilently: (o: GetTokenSilentlyOptions | undefined) =>\n                    auth0Client!.getTokenSilently(o),\n                getTokenWithPopup: (o: GetTokenWithPopupOptions | undefined) =>\n                    auth0Client!.getTokenWithPopup(o),\n                logout: (o: LogoutOptions | undefined) => auth0Client!.logout(o)\n            }}\n        >\n            {children}\n        </Auth0Context.Provider>\n    );\n};\n","export class Auth0 {\n    public static domain = \"classclock.auth0.com\";\n    public static clientId = \"Z5H5pk78OhW6naNZHnK6CI6EEKZoVipr\";\n    public static audience = \"https://api.classclock.app\";\n}\n\nexport const pages = {\n    main: \"/\",\n    fullSchedule: \"/schedule.html\",\n    settings: \"/settings.html\",\n    selectSchool: \"/select\",\n    loginCallback: \"/callback\",\n    admin: \"/admin\"\n};\n\nexport const URLs = {\n    github: \"https://github.com/MoralCode/ClassClock\",\n    slack:\n        \"https://join.slack.com/t/classclock/shared_invite/enQtNTE0MDkyNzAwNzU3LWNhMGUwODU2ZjhkYTYxMTgzNDE1OWEyMGY2OGNiNTBhOWM5NDVhZGUzNDVlNzRiZTE3NTNmODFjYWNkNDhmMDU\",\n    twitter: \"https://twitter.com/classclockapp\",\n    instagram: \"https://www.instagram.com/classclockapp/\"\n};\n","import React, { Component, CSSProperties } from \"react\";\n\ninterface ILinkProps {\n    destination: any;\n    className?: string;\n    style?: CSSProperties;\n    title?: string;\n    id?: string;\n}\n\nexport default class Link extends Component<ILinkProps, {}> {\n    render() {\n        return (\n            <a\n                className={this.props.className}\n                id={this.props.id}\n                style={Object.assign({}, this.props.style, { cursor: \"pointer\" })}\n                title={this.props.title}\n                href={\n                    typeof this.props.destination === \"function\"\n                        ? undefined\n                        : this.props.destination\n                }\n                onClick={\n                    typeof this.props.destination === \"function\"\n                        ? this.props.destination\n                        : undefined\n                }\n            >\n                {this.props.children}\n            </a>\n        );\n    }\n}\n","import React, { Component, CSSProperties } from \"react\";\nimport \"./Block.css\";\n\ninterface ITextProps {\n    className?: string;\n    style?: CSSProperties;\n}\nexport default class Block extends Component<ITextProps, {}> {\n    render() {\n        return (\n            <div\n                className={\n                    \"infoBlock\" + (this.props.className ? \" \" + this.props.className : \"\")\n                }\n                style={this.props.style}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","import React, { Component, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport \"../global.css\";\nimport Link from \"../components/Link\";\nimport Icon from \"../components/Icon\";\nimport Block from \"../components/Block/Block\";\nimport Time from \"../@types/time\";\nimport School from \"../@types/school\";\nimport { pages } from \"../utils/constants\";\nimport BellSchedule from \"../@types/bellschedule\";\nimport { IState } from \"../store/schools/types\";\nimport { getNextImportantInfo, getCurrentDate } from \"../utils/helpers\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface IAppProps {\n    selectedSchool: {\n        isFetching: boolean;\n        didInvalidate: false;\n        data: School;\n    };\n    dispatch: any;\n}\n\nconst App = (props: IAppProps) => {\n    const [currentDate, setDate] = useState(getCurrentDate());\n\n    const navigate = (to: string) => {\n        props.dispatch(push(to));\n    };\n\n    useEffect(() => {\n        const interval: NodeJS.Timeout = setInterval(() => {\n            setDate(getCurrentDate());\n        }, 500);\n\n        return () => clearInterval(interval);\n    }, [currentDate]);\n\n    const currentSchedule = props.selectedSchool.data.getScheduleForDate(currentDate);\n\n    let content: JSX.Element = <></>;\n\n    switch (currentSchedule) {\n        case undefined:\n            if (!props.selectedSchool.isFetching) {\n                props.dispatch(push(pages.selectSchool));\n            }\n            break;\n        case null:\n            content = <p>No School Today</p>;\n            break;\n        default:\n            const nextImportantInfo = getNextImportantInfo(\n                currentDate,\n                props.selectedSchool.data\n            );\n            const [nextClass, nextImportantTime] = nextImportantInfo\n                ? nextImportantInfo\n                : [undefined, undefined];\n\n            const currentClass = currentSchedule.getClassPeriodForTime(\n                Time.fromDate(currentDate)\n            );\n\n            content = (\n                <>\n                    <Block>\n                        <p>\n                            Today is a{\" \"}\n                            <Link\n                                // tslint:disable-next-line: jsx-no-lambda\n                                destination={() => navigate(pages.fullSchedule)}\n                                id=\"viewScheduleLink\"\n                            >\n                                {currentSchedule.getName()}\n                            </Link>\n                        </p>\n                    </Block>\n                    <Block>\n                        <p>You are currently in: </p>\n                        <p className=\"timeFont\" style={{ fontSize: \"30px\" }}>\n                            <b>\n                                {currentClass !== undefined\n                                    ? currentClass.getName()\n                                    : props.selectedSchool.data.getPassingTimeName()}\n                            </b>\n                        </p>\n                    </Block>\n                    <Block>\n                        <p>...which ends in:</p>\n                        {/* <h1 className=\"centered bottomSpace time bigger\" id=\"timeToEndOfClass\" /> */}\n                        <p className=\"timeFont\" style={{ fontSize: \"60px\" }}>\n                            <b>\n                                {nextImportantTime\n                                    ? Time.fromDate(currentDate)\n                                          .getTimeDeltaTo(nextImportantTime)\n                                          .getFormattedString()\n                                    : \"No Class\"}\n                            </b>\n                        </p>\n                        <p>Your next class period is: </p>\n                        <p className=\"timeFont\" style={{ fontSize: \"30px\" }}>\n                            <b>{nextClass ? nextClass.getName() : \"No Class\"}</b>\n                        </p>\n                    </Block>\n                </>\n            );\n            break;\n    }\n\n    return (\n        <div className=\"App\">\n            <Link\n                className=\"cornerNavButton smallIcon\"\n                // tslint:disable-next-line: jsx-no-lambda\n                destination={() => navigate(pages.settings)}\n            >\n                <FontAwesomeIcon icon={faCog} />\n            </Link>\n            <br />\n            <Block>\n                <p>It is currently: </p>\n                <p className=\"timeFont\" style={{ fontSize: \"40px\" }}>\n                    {Time.fromDate(currentDate).getFormattedString()}\n                </p>\n                <p>\n                    on{\" \"}\n                    <b>\n                        {currentDate.toLocaleDateString(\"en-US\", {\n                            weekday: \"long\",\n                            year: \"numeric\",\n                            month: \"short\",\n                            day: \"numeric\"\n                        })}\n                    </b>\n                </p>\n            </Block>\n\n            {content}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => {\n    const { selectedSchool } = state;\n    selectedSchool.data = School.fromJson(selectedSchool.data);\n    return { selectedSchool };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport IPageInterface from \"../utils/IPageInterface\";\n\nimport \"../global.css\";\nimport School from \"../@types/school\";\nimport { IState } from \"../store/schools/types\";\nimport Link from \"../components/Link\";\nimport { pages } from \"../utils/constants\";\nimport Icon from \"../components/Icon\";\nimport { getCurrentDate, sortClassesByStartTime } from \"../utils/helpers\";\nimport ClassPeriod from \"../@types/classperiod\";\nimport ScheduleEntry from \"../components/ScheduleEntry/ScheduleEntry\";\nimport List from \"../components/List/List\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface IAppProps {\n    selectedSchool: {\n        isFetching: boolean;\n        didInvalidate: false;\n        data: School;\n    };\n    dispatch: any;\n}\n\nconst Schedule = (props: IAppProps) => {\n    let content: JSX.Element = <></>;\n    const currentSchedule = props.selectedSchool.data.getScheduleForDate(\n        getCurrentDate()\n    );\n\n    switch (currentSchedule) {\n        case undefined:\n            props.dispatch(push(pages.selectSchool));\n            break;\n        case null:\n            content = <p>No School Today</p>;\n            break;\n        default:\n            content = (\n                <>\n                    <p>{currentSchedule.getName()}</p>\n                    {/* <List items={scheduleItems} /> */}\n                    <table>\n                        <thead>\n                            <tr>\n                                <td>\n                                    <b>Class</b>\n                                </td>\n                                <td>\n                                    <b>Time</b>\n                                </td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {sortClassesByStartTime(currentSchedule.getAllClasses()).map(\n                                (value: ClassPeriod) => (\n                                    <>\n                                        <tr>\n                                            <td>{value.getName()}</td>\n                                            <td>\n                                                {value.getStartTime().toString()} -{\" \"}\n                                                {value.getEndTime().toString()}\n                                            </td>\n                                        </tr>\n                                    </>\n                                )\n                            )}\n                        </tbody>\n                    </table>\n                </>\n            );\n            break;\n    }\n\n    return (\n        <div>\n            <Link\n                className=\"cornerNavButton smallIcon\"\n                // tslint:disable-next-line: jsx-no-lambda\n                destination={() => props.dispatch(push(pages.main))}\n            >\n                <FontAwesomeIcon icon={faHome} />\n            </Link>\n            <br />\n            <p style={{ fontSize: \"30px\" }}>\n                <b>{props.selectedSchool.data.getName()}</b>\n            </p>\n\n            {content}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => {\n    const { selectedSchool } = state;\n    selectedSchool.data = School.fromJson(selectedSchool.data);\n    return { selectedSchool };\n};\n\nexport default connect(mapStateToProps)(Schedule);\n","export default class ClassClockService {\n    public static baseURL: string = \"https://api.classclock.app/v0\";\n\n    static getSchoolsList = async (params?: any): Promise<Response> => {\n        return await fetch(\n            ClassClockService.baseURL + \"/schools/\",\n            ClassClockService.getHeaders(\"GET\", params)\n        );\n    };\n\n    static getSchool = async (schoolId: string, params?: any): Promise<Response> => {\n        return await fetch(\n            ClassClockService.baseURL + \"/school/\" + schoolId + \"/\",\n            ClassClockService.getHeaders(\"GET\", params)\n        );\n    };\n\n    static getSchedulesListForSchool = async (\n        schoolId: string,\n        params?: any\n    ): Promise<Response> => {\n        return await fetch(\n            ClassClockService.baseURL + \"/school/\" + schoolId + \"/bellschedules/\",\n            ClassClockService.getHeaders(\"GET\", params)\n        );\n    };\n\n    static getDetailedScheduleForSchool = async (\n        schoolId: string,\n        scheduleId: string,\n        params?: any\n    ): Promise<Response> => {\n        return await fetch(\n            ClassClockService.baseURL +\n                \"/school/\" +\n                schoolId +\n                \"/bellschedule/\" +\n                scheduleId +\n                \"/\",\n            ClassClockService.getHeaders(\"GET\", params)\n        );\n    };\n\n    static validateResponse = async (call: Promise<Response>) => {\n        return await call.then(\n            (response: Response) => {\n                if (response.ok) {\n                    return response.json();\n                }\n            },\n            // Do not use catch, because that will also catch\n            // any errors in the dispatch and resulting render,\n            // causing a loop of 'Unexpected batch number' errors.\n            // https://github.com/facebook/react/issues/6895\n            (error: Error) => console.log(\"An error occurred.\", error)\n        );\n    };\n\n    private static getHeaders = (\n        method: string,\n        authToken?: string,\n        params?: any\n    ): { method: string; headers: Headers } => {\n        const parameters = authToken\n            ? { ...params, Authorization: \"Bearer \" + authToken }\n            : params;\n        return Object.assign(\n            {},\n            {\n                method,\n                headers: new Headers({ Accept: \"application/vnd.api+json\" })\n            },\n            parameters\n        );\n    };\n}\n","import {\n    SELECT_SCHOOL,\n    SchoolActionTypes,\n    FETCH_ERROR,\n    RECEIVE_SCHOOL,\n    REQUEST_SCHOOL,\n    INVALIDATE_SCHOOL\n} from \"./types\";\nimport { Dispatch } from \"redux\";\nimport ClassClockService from \"../../services/classclock\";\nimport School from \"../../@types/school\";\nimport BellSchedule from \"../../@types/bellschedule\";\nimport { deconstructJsonApiResource } from \"../../utils/helpers\";\n\nfunction requestSchool(): SchoolActionTypes {\n    return {\n        type: SELECT_SCHOOL\n    };\n}\n\nexport function invalidateSchool(): SchoolActionTypes {\n    return {\n        type: INVALIDATE_SCHOOL\n    };\n}\n\nfunction receiveSchool(json: any): SchoolActionTypes {\n    return {\n        type: RECEIVE_SCHOOL,\n        school: School.fromJson(json),\n        receivedAt: Date.now()\n    };\n}\n\nfunction fetchError(message: string): SchoolActionTypes {\n    return {\n        type: FETCH_ERROR,\n        message\n    };\n}\n\nexport function selectSchool(schoolId: string) {\n    return async (dispatch: Dispatch) => {\n        dispatch(requestSchool());\n\n        const school = ClassClockService.validateResponse(\n            ClassClockService.getSchool(schoolId)\n        );\n\n        const schedules = ClassClockService.validateResponse(\n            ClassClockService.getSchedulesListForSchool(schoolId)\n        );\n\n        Promise.all([school, schedules]).then((result: any) => {\n            const [schoolResult, scheduleResult] = result;\n\n            //result = [school() result, schedules() result]\n            //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all#Using_Promise.all\n\n            const scheduleDataList: Array<Promise<any>> = [];\n\n            for (const schedule of scheduleResult.data) {\n                const scheduleId = schedule.id;\n                // const sched_uri = schedule.links.self;\n                const scheduleRequest = ClassClockService.validateResponse(\n                    ClassClockService.getDetailedScheduleForSchool(schoolId, scheduleId)\n                );\n\n                scheduleDataList.push(scheduleRequest);\n            }\n\n            Promise.all(scheduleDataList).then((schedulesList: any) => {\n                schoolResult.data.attributes.schedules = schedulesList.map(\n                    (schedule: any) => deconstructJsonApiResource(schedule.data)\n                );\n                dispatch(receiveSchool(deconstructJsonApiResource(schoolResult.data)));\n            });\n        });\n    };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport IPageInterface from \"../utils/IPageInterface\";\nimport \"../global.css\";\nimport { IState } from \"../store/schools/types\";\nimport { IState as UserSettingsIState } from \"../store/usersettings/types\";\nimport School from \"../@types/school\";\nimport Link from \"../components/Link\";\nimport { pages } from \"../utils/constants\";\nimport Icon from \"../components/Icon\";\nimport { URLs } from \"../utils/constants\";\nimport { setTimeFormatPreference } from \"../store/usersettings/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub, faTwitter, faInstagram } from \"@fortawesome/free-brands-svg-icons\";\nimport { faHome, faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { useAuth0 } from \"../react-auth0-wrapper\";\nimport format from \"date-fns/format\";\nimport { selectSchool, invalidateSchool } from \"../store/schools/actions\";\n\nexport interface ISettingProps {\n    selectedSchool: any;\n    userSettings: { use24HourTime: boolean }; //this is duplicated. ugh\n    dispatch: any;\n}\n\nconst Settings = (props: ISettingProps) => {\n    const { logout, user, getTokenSilently } = useAuth0();\n\n    const navigate = (to: string) => {\n        props.dispatch(push(to));\n    };\n\n    if (props.selectedSchool.data === {} && !props.selectedSchool.isFetching) {\n        navigate(pages.selectSchool);\n    }\n\n    return (\n        <div>\n            <Link\n                className=\"cornerNavButton smallIcon\"\n                // tslint:disable-next-line: jsx-no-lambda\n                destination={() => navigate(pages.main)}\n            >\n                <FontAwesomeIcon icon={faHome} />\n            </Link>\n            <br />\n\n            <h1>Settings</h1>\n            {user ? (\n                <span>\n                    Hello <b>{user.name || user.email}</b> (\n                    <Link\n                        // tslint:disable-next-line: jsx-no-lambda\n                        destination={() => {\n                            logout();\n                            props.dispatch(invalidateSchool());\n                        }}\n                        title=\"Log Out\"\n                    >\n                        <FontAwesomeIcon icon={faSignOutAlt} /> Log Out\n                    </Link>\n                    )\n                </span>\n            ) : (\n                undefined\n            )}\n\n            <p>\n                {props.selectedSchool.isFetching ? (\n                    <span>Loading School...</span>\n                ) : (\n                    <b>{props.selectedSchool.data.getName() + \" \"}</b>\n                )}\n                <br />\n                <em className=\"smallerText\">\n                    (\n                    <Link\n                        // tslint:disable-next-line: jsx-no-lambda\n                        destination={() => navigate(pages.selectSchool)}\n                        title=\"Change School\"\n                    >\n                        Change School\n                    </Link>\n                    )\n                </em>\n                {user && props.selectedSchool.data.getOwnerIdentifier() === user.sub ? (\n                    <em className=\"smallerText\">\n                        (\n                        <Link\n                            // tslint:disable-next-line: jsx-no-lambda\n                            destination={() => navigate(pages.admin)}\n                            title=\"Manage School\"\n                        >\n                            Manage School\n                        </Link>\n                        )\n                    </em>\n                ) : (\n                    undefined\n                )}\n                <br />\n                <em className=\"smallerText\">\n                    Updated:{\" \"}\n                    {format(\n                        new Date(props.selectedSchool.lastUpdated),\n                        \"MMM D YYYY h:mm:ss a\"\n                    ) + \" \"}\n                </em>\n                {!props.selectedSchool.isFetching ? (\n                    <em className=\"smallerText\">\n                        (\n                        <Link\n                            // tslint:disable-next-line: jsx-no-lambda\n                            destination={() =>\n                                props.dispatch(\n                                    selectSchool(\n                                        props.selectedSchool.data.getIdentifier()\n                                    )\n                                )\n                            }\n                            title=\"Reload Schedule\"\n                        >\n                            Refresh\n                        </Link>\n                        )\n                    </em>\n                ) : (\n                    undefined\n                )}\n            </p>\n            <label>\n                <b>Use 24-hour Time?</b>{\" \"}\n                <input\n                    type=\"checkbox\"\n                    checked={props.userSettings.use24HourTime}\n                    // tslint:disable-next-line: jsx-no-lambda\n                    onChange={() => {\n                        props.dispatch(\n                            setTimeFormatPreference(!props.userSettings.use24HourTime)\n                        );\n                    }}\n                />\n            </label>\n            <br />\n            <p>\n                <em className=\"smallerText\">\n                    Settings are automatically saved on your device\n                </em>\n            </p>\n\n            <p style={{ marginTop: \"20vh\" }}>Follow ClassClock:</p>\n            <ul className=\"footer__social\">\n                <li>\n                    <Link destination={URLs.github}>\n                        <FontAwesomeIcon icon={faGithub} />\n                    </Link>\n                </li>\n                <li>\n                    <Link destination={URLs.twitter}>\n                        <FontAwesomeIcon icon={faTwitter} />\n                    </Link>\n                </li>\n                <li>\n                    <Link destination={URLs.instagram}>\n                        <FontAwesomeIcon icon={faInstagram} />\n                    </Link>\n                </li>\n            </ul>\n            <p id=\"credits\">\n                Created by: <a href=\"https://www.adriancedwards.com\">Adrian Edwards</a>{\" \"}\n                and <a href=\"https://nbdeg.com/\">Nick DeGroot</a>\n                <br />\n                Idea by: <a href=\"https://twitter.com/MrKumprey\">Dan Kumprey</a>\n            </p>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState & UserSettingsIState) => {\n    const { selectedSchool, userSettings } = state;\n    return {\n        selectedSchool: Object.assign({}, selectedSchool, {\n            data: School.fromJson(selectedSchool.data)\n        }),\n        userSettings\n    };\n};\n\nexport default connect(mapStateToProps)(Settings);\n","import { UserSettingActionTypes, SET_TIME_FORMAT } from \"./types\";\n\nexport function setTimeFormatPreference(use24HourTime: boolean): UserSettingActionTypes {\n    return {\n        type: SET_TIME_FORMAT,\n        use24HourTime\n    };\n}\n","import React, { useEffect } from \"react\";\nimport { useAuth0 } from \"../react-auth0-wrapper\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }: any) => {\n    const { isAuthenticated, loginWithRedirect } = useAuth0();\n\n    useEffect(() => {\n        const fn = async () => {\n            if (!isAuthenticated) {\n                await loginWithRedirect({\n                    appState: { targetUrl: path }\n                });\n            }\n        };\n        fn();\n    }, [isAuthenticated, loginWithRedirect, path]);\n\n    const Render = (props: any) =>\n        isAuthenticated === true ? <Component {...props} /> : null;\n\n    return <Render />;\n};\n\nexport default PrivateRoute;\n","import React, { Component, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport \"../../global.css\";\nimport \"./SchoolSelect.css\";\n\nimport { selectSchool } from \"../../store/schools/actions\";\nimport { useAuth0 } from \"../../react-auth0-wrapper\";\nimport School from \"../../@types/school\";\nimport ClassClockService from \"../../services/classclock\";\nimport { pages } from \"../../utils/constants\";\nimport { IState } from \"../../store/schools/types\";\nimport { deconstructJsonApiResource } from \"../../utils/helpers\";\n\nexport interface ISelectProps {\n    selectedSchool: any;\n    dispatch: any;\n}\n\nconst SchoolSelect = (props: ISelectProps) => {\n    const [schoolList, setSchoolList] = useState([]);\n    const [lastRefresh, setlastRefresh] = useState(0);\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        if (\n            schoolList.length === 0 &&\n            // isFetching === false &&\n            Math.abs(new Date().getTime() - lastRefresh) > 120000 //120000 ms\n        ) {\n            const fetchSchools = async (abortSignal: AbortSignal) => {\n                ClassClockService.validateResponse(\n                    ClassClockService.getSchoolsList({\n                        signal: abortSignal\n                    })\n                ).then((json: any) => {\n                    setSchoolList(\n                        json.data.map((value: any) =>\n                            School.fromJson(deconstructJsonApiResource(value))\n                        )\n                    );\n\n                    setlastRefresh(new Date().getTime());\n                });\n            };\n            fetchSchools(signal);\n        }\n\n        return () => {\n            controller.abort();\n        };\n    }, []);\n\n    const list = schoolList.map((school: School) => (\n        <li\n            key={school.getIdentifier()}\n            onClick={() => {\n                props.dispatch(selectSchool(school.getIdentifier()));\n                props.dispatch(push(pages.main));\n            }}\n        >\n            <span className=\"schoolAcronym\">{school.getAcronym()}</span>\n            <br />\n            <span className=\"schoolName\">{school.getName()}</span>\n        </li>\n    ));\n\n    return (\n        <div>\n            <h2>Please select a school</h2>\n            {schoolList.length === 0 ? (\n                <span>Loading...</span>\n            ) : (\n                <ul className=\"schoolSelectionList\">{list}</ul>\n            )}\n\n            {/* <a onClick={}>Refresh</a> */}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => {\n    const { selectedSchool } = state;\n    return { selectedSchool };\n};\nexport default connect(mapStateToProps)(SchoolSelect);\n","import React, { useState } from \"react\";\nimport \"./Calendar.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronRight, faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport dateFns from \"date-fns\";\nimport Link from \"../Link\";\n\nexport interface IScheduleDates {\n    [key: string]: { name: string; color: string; dates?: number[] };\n}\n\nexport interface ICalendarProps {\n    options: IScheduleDates;\n}\n\nconst Calendar = (props: ICalendarProps) => {\n    const [currentMonth, setCurrentMonth] = useState(new Date());\n    const initialOptions: { [key: string]: number[] } = {};\n    for (const option of Object.keys(props.options)) {\n        initialOptions[option] = [];\n    }\n    const [selectedDates, setSelectedDates] = useState(initialOptions);\n\n    const config = { weekStartsOn: 1 };\n    const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), config);\n    const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), config);\n\n    const onDateClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        const dateValue: Date = new Date(parseInt(event.currentTarget.dataset.date!, 10));\n        if (isValidDate(dateValue)) {\n            const next = getNextOptionForDate(dateValue);\n            setOptionForDate(dateValue, next);\n        } else {\n            console.log(\"invalid date\");\n        }\n\n        // event.currentTarget.value = props.options[(key + 1) % props.options.length];\n    };\n\n    const getNextOptionForDate = (date: Date) => {\n        const location = getGroupAndPositionForDate(date);\n        const currentOptionKey = location ? location[0] : undefined;\n        const optionKeys = Object.keys(props.options);\n\n        if (!location) {\n            return optionKeys[0];\n        } else if (\n            currentOptionKey &&\n            currentOptionKey === optionKeys[optionKeys.length - 1]\n        ) {\n            return;\n        } else if (currentOptionKey) {\n            return optionKeys[optionKeys.indexOf(currentOptionKey) + 1];\n        }\n    };\n\n    const setOptionForDate = (date: Date, option?: string) => {\n        const location = getGroupAndPositionForDate(date);\n\n        if (location && option) {\n            const [optionKey, posInOption] = location;\n\n            if (optionKey !== option) {\n                let updatedSelections = selectedDates;\n                updatedSelections = removeDateFromSelectionList(\n                    updatedSelections,\n                    optionKey,\n                    posInOption\n                );\n                updatedSelections = addDateToSelectionList(\n                    updatedSelections,\n                    option,\n                    date\n                );\n                setSelectedDates(updatedSelections);\n            }\n        } else if (!location && option) {\n            setSelectedDates(addDateToSelectionList(selectedDates, option, date));\n        } else if (location && !option) {\n            const [optionKey, posInOption] = location;\n            setSelectedDates(\n                removeDateFromSelectionList(selectedDates, optionKey, posInOption)\n            );\n        }\n    };\n\n    //https://stackoverflow.com/a/1353711\n    const isValidDate = (d: Date) => {\n        return d instanceof Date && !isNaN(d.getTime());\n    };\n\n    const addDateToSelectionList = (\n        datesSelected: { [key: string]: number[] },\n        option: string,\n        date: Date\n    ) => {\n        const updatedGroup: { [key: string]: number[] } = {};\n        updatedGroup[option] = [...datesSelected[option], date.getTime()];\n        const result = Object.assign({}, datesSelected, updatedGroup);\n\n        return result;\n    };\n\n    const removeDateFromSelectionList = (\n        datesSelected: { [key: string]: number[] },\n        option: string,\n        index: number\n    ) => {\n        const updatedGroup: { [key: string]: number[] } = {};\n        updatedGroup[option] = [\n            ...datesSelected[option].slice(0, index),\n            ...datesSelected[option].slice(index + 1)\n        ];\n\n        const result = Object.assign({}, datesSelected, updatedGroup);\n\n        return result;\n    };\n\n    const getGroupAndPositionForDate = (date: Date): [string, number] | undefined => {\n        // const groups: Array<[string, number]> = [];\n        for (const key in selectedDates) {\n            if (selectedDates.hasOwnProperty(key)) {\n                const indexInGroup = selectedDates[key].indexOf(date.getTime());\n                if (indexInGroup !== -1) {\n                    return [key, indexInGroup];\n                }\n            }\n        }\n\n        return;\n        // const dateInUnixTime = date.getTime();\n        // const index = selectedDates[key].indexOf(dateInUnixTime);\n    };\n\n    const getWeekdayNameHeaders = () => {\n        const dayNames = [];\n\n        for (let i = 0; i < 7; i++) {\n            dayNames.push(dateFns.format(dateFns.addDays(startDate, i), \"ddd\"));\n        }\n        return dayNames;\n    };\n\n    const getMonthGrid = () => {\n        const monthGrid = [];\n        let tempRowData = [];\n\n        for (\n            let dateIndex = 0;\n            dateIndex <= dateFns.differenceInDays(endDate, startDate);\n            dateIndex++\n        ) {\n            const date = dateFns.addDays(startDate, dateIndex);\n            const firstDayOfWeek = dateFns.startOfWeek(date, config);\n            const firstDayOfWeekTomorrow = dateFns.startOfWeek(\n                dateFns.addDays(date, 1),\n                config\n            );\n\n            const location = getGroupAndPositionForDate(date);\n            const currentOptionKey = location ? location[0] : undefined;\n\n            const color = currentOptionKey\n                ? { backgroundColor: props.options[currentOptionKey].color }\n                : undefined;\n\n            tempRowData.push(\n                <td key={\"date\" + dateIndex}>\n                    <span\n                        onClick={event => onDateClick(event)}\n                        className={\n                            dateFns.getMonth(date) !== dateFns.getMonth(currentMonth)\n                                ? \"disabled\"\n                                : undefined\n                        }\n                        data-date={date.getTime()}\n                        style={color}\n                    >\n                        {date.getDate()}\n                    </span>\n                </td>\n            );\n\n            if (!dateFns.isEqual(firstDayOfWeek, firstDayOfWeekTomorrow)) {\n                monthGrid.push(<tr key={\"weekBegin\" + dateIndex}>{tempRowData}</tr>);\n                tempRowData = [];\n            }\n        }\n        return monthGrid;\n    };\n\n    return (\n        <table className=\"calendarGrid\">\n            <thead>\n                <tr>\n                    <th colSpan={7}>\n                        <Link\n                            destination={() =>\n                                setCurrentMonth(dateFns.subMonths(currentMonth, 1))\n                            }\n                            className=\"smallIcon\"\n                        >\n                            <FontAwesomeIcon icon={faChevronLeft} />\n                        </Link>\n                        <span id=\"monthDisplay\">\n                            {dateFns.format(currentMonth, \"MMMM YYYY\")}\n                        </span>\n                        <Link\n                            destination={() =>\n                                setCurrentMonth(dateFns.addMonths(currentMonth, 1))\n                            }\n                            className=\"smallIcon\"\n                        >\n                            <FontAwesomeIcon icon={faChevronRight} />\n                        </Link>\n                    </th>\n                </tr>\n                <tr>\n                    {getWeekdayNameHeaders().map((value: string, index: number) => (\n                        <td key={index}>{value}</td>\n                    ))}\n                </tr>\n            </thead>\n            <tbody>{getMonthGrid()}</tbody>\n        </table>\n    );\n};\n\nexport default Calendar;\n","import React, { Component, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport \"../global.css\";\nimport School from \"../@types/school\";\nimport { pages } from \"../utils/constants\";\nimport BellSchedule from \"../@types/bellschedule\";\nimport { IState } from \"../store/schools/types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { useAuth0 } from \"../react-auth0-wrapper\";\nimport Calendar, { IScheduleDates } from \"../components/Calendar/Calendar\";\n\nexport interface IAdminProps {\n    selectedSchool: {\n        isFetching: boolean;\n        didInvalidate: false;\n        data: School;\n    };\n    dispatch: any;\n}\n\nconst Admin = (props: IAdminProps) => {\n    const { user, getTokenSilently } = useAuth0();\n\n    const navigate = (to: string) => {\n        props.dispatch(push(to));\n    };\n\n    // if (\n    //     user === undefined ||\n    //     props.selectedSchool.data.getOwnerIdentifier() !== user.sub\n    // ) {\n    //     //user does not own school\n    //     navigate(pages.main);\n    // }\n\n    //https://stackoverflow.com/a/1484514\n    const getRandomHtmlColor = () => {\n        const letters = \"0123456789ABCDEF\";\n        let color = \"#\";\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    };\n\n    const getScheduleOptions = () => {\n        const schedules = props.selectedSchool.data.getSchedules();\n        const optionProps: IScheduleDates = {};\n        if (schedules !== undefined) {\n            for (const schedule of schedules) {\n                optionProps[schedule.getIdentifier()] = {\n                    color: getRandomHtmlColor(),\n                    name: schedule.getName()\n                };\n            }\n        }\n        return optionProps;\n    };\n\n    const scheduleOptions = getScheduleOptions();\n    const key = [];\n    for (const option in scheduleOptions) {\n        if (scheduleOptions.hasOwnProperty(option)) {\n            key.push(\n                <li style={{ backgroundColor: scheduleOptions[option].color }}>\n                    {scheduleOptions[option].name}\n                </li>\n            );\n        }\n    }\n    return (\n        <div>\n            <h1>Admin</h1>\n            <Calendar options={scheduleOptions} />\n            <ul\n                style={{\n                    listStyleType: \"none\",\n                    margin: 0,\n                    padding: 0\n                }}\n            >\n                {key}\n            </ul>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => {\n    const { selectedSchool } = state;\n    selectedSchool.data = School.fromJson(selectedSchool.data);\n    return { selectedSchool };\n};\n\nexport default connect(mapStateToProps)(Admin);\n","import React from \"react\";\nimport App from \"../pages/App\";\nimport Schedule from \"../pages/Schedule\";\nimport Settings from \"../pages/Settings\";\nimport PrivateRoute from \"../components/PrivateRoute\";\nimport SchoolSelect from \"../pages/SchoolSelect/SchoolSelect\";\nimport { pages } from \"./constants\";\nimport Admin from \"../pages/Admin\";\n\nexport const routes = [\n    {\n        path: pages.main,\n        action: () => <App />\n    },\n    {\n        path: pages.fullSchedule,\n        action: () => <Schedule />\n    },\n    {\n        path: pages.settings,\n        action: () => <Settings />\n    },\n    {\n        path: pages.selectSchool,\n        action: () => <SchoolSelect />\n    },\n    {\n        path: pages.admin,\n        action: () => <PrivateRoute component={Admin} path={pages.admin} />\n    },\n    {\n        path: pages.loginCallback,\n        action: () => <p>Redirecting...</p>\n    }\n];\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { configureStore } from \"./store/store\";\nimport { createBrowserHistory, startListener, push, replace } from \"redux-first-routing\";\nimport UniversalRouter from \"universal-router\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Auth0Provider } from \"./react-auth0-wrapper\";\nimport { Auth0 } from \"./utils/constants\";\nimport { routes } from \"./utils/routes\";\n\n// Create the history object\nconst history = createBrowserHistory();\n\n// Create the store, passing it the history object\nconst configuredStore = configureStore(history); //createStore(combineReducers(reducers), applyMiddleware(thunk));\n\n// Start the history listener, which automatically dispatches actions to keep the store in sync with the history\nstartListener(history, configuredStore.store);\n\n// Create the router\nconst router = new UniversalRouter(routes);\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = (appState: any) => {\n    // Temporary Firefox workaround: https://github.com/auth0/auth0-spa-js/blob/master/FAQ.md\n    window.location.hash = window.location.hash; // eslint-disable-line no-self-assign\n\n    configuredStore.store.dispatch(\n        replace(\n            appState && appState.targetUrl ? appState.targetUrl : window.location.pathname\n        )\n    );\n};\n\n// Create the reactive render function\nfunction render(pathname: string) {\n    router.resolve(pathname).then((component: any) => {\n        // console.log(component);\n\n        ReactDOM.render(\n            <Provider store={configuredStore.store}>\n                <PersistGate loading={null} persistor={configuredStore.persistor}>\n                    <Auth0Provider\n                        domain={Auth0.domain}\n                        client_id={Auth0.clientId}\n                        audience={Auth0.audience}\n                        redirect_uri={\"http://localhost:3000/callback\"}\n                        onRedirectCallback={onRedirectCallback}\n                    >\n                        {component}\n                    </Auth0Provider>\n                </PersistGate>\n            </Provider>,\n            document.getElementById(\"root\")\n        );\n    });\n}\n\n// Get the current pathname\nlet currentLocation = configuredStore.store.getState().router.pathname;\n\n// Subscribe to the store location\nconst unsubscribe = configuredStore.store.subscribe(() => {\n    const previousLocation = currentLocation;\n    currentLocation = configuredStore.store.getState().router.pathname;\n\n    if (previousLocation !== currentLocation) {\n        console.log(\n            \"Some deep nested property changed from\",\n            previousLocation,\n            \"to\",\n            currentLocation\n        );\n        render(currentLocation);\n    }\n});\n\nrender(currentLocation);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}