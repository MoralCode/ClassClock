{"version":3,"sources":["serviceWorker.ts","store/schools/types.ts","store/schools/reducer.ts","utils/enums.ts","@types/time.ts","utils/helpers.tsx","@types/classperiod.ts","@types/bellschedule.ts","@types/school.ts","utils/typetransform.ts","store/usersettings/types.ts","store/usersettings/reducer.ts","store/store.ts","react-auth0-wrapper.tsx","utils/constants.ts","components/Link.tsx","components/Block/Block.tsx","pages/App.tsx","pages/Schedule.tsx","services/classclock.ts","store/schools/actions.ts","pages/Settings.tsx","store/usersettings/actions.ts","components/PrivateRoute.tsx","pages/SchoolSelect/SchoolSelect.tsx","components/Calendar/Calendar.tsx","pages/Admin.tsx","utils/routes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","RECEIVE_SCHOOL","FETCH_ERROR","SELECT_SCHOOL","INVALIDATE_SCHOOL","selectedSchoolReducer","state","isFetching","data","action","type","Object","assign","school","lastUpdated","receivedAt","fetchErrorReducer","message","TimeStates","TimeComparisons","Time","hours","minutes","seconds","this","Math","abs","milliseconds","floor","date","getHours","getMinutes","getSeconds","time","parts","split","length","parseInt","undefined","otherTime","fromMilliseconds","getMillisecondsTo","excludeSeconds","use24HourTime","stringified","toString","padStart","ending","isAM","getValueIfKeyInList","list","object","key","hasOwnProperty","deconstructJsonApiResource","json","id","links","endpoint","self","attributes","getCurrentDate","Date","sortClassesByStartTime","classes","sort","a","b","getStartTime","checkTimeRange","checkTime","startTime","endTime","startCheck","endCheck","IS_BEFORE","IS_AFTER","IS_DURING_OR_EXACTLY","ClassPeriod","name","creationDate","start","end","fromString","getTimeDeltaTo","BellSchedule","dates","lastUpdatedDate","displayName","map","parse","meetingTime","fromJson","getTime","classPeriod","stateForTime","School","ownerId","fullName","acronym","timeZone","schedules","passingPeriodName","schedule","getDates","d","toDateString","includes","currentTime","fromDate","currentSchedule","getScheduleForDate","getAllClasses","numberOfClasses","getEndTime","SchoolTransform","createTransform","inboundState","selectedSchool","JSON","stringify","outboundState","whitelist","SET_TIME_FORMAT","userSettingsReducer","persistConfig","storage","transforms","blacklist","DEFAULT_REDIRECT_CALLBACK","history","replaceState","document","title","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","createAuth0Client","auth0FromHook","search","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","o","console","error","result","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","Auth0","domain","clientId","audience","pages","main","fullSchedule","settings","selectSchool","loginCallback","admin","URLs","Link","className","props","style","cursor","href","destination","onClick","Component","Block","connect","currentDate","setDate","navigate","to","dispatch","push","interval","setInterval","clearInterval","content","nextImportantInfo","currentBellSchedule","i","getNextImportantInfo","nextClass","nextImportantTime","currentClass","getClassPeriodForTime","getName","fontSize","getPassingTimeName","getFormattedString","icon","faCog","toLocaleDateString","weekday","year","month","day","faHome","ClassClockService","schoolId","onError","log","validateResponse","getSchool","getSchedulesListForSchool","Promise","all","then","schoolResult","scheduleResult","scheduleDataList","scheduleId","scheduleRequest","getDetailedScheduleForSchool","schedulesList","now","baseURL","getSchoolsList","params","fetch","getHeaders","call","response","ok","method","authToken","parameters","Authorization","headers","Headers","Accept","userSettings","email","faSignOutAlt","getOwnerIdentifier","sub","format","getIdentifier","checked","onChange","marginTop","faGithub","faTwitter","faInstagram","PrivateRoute","component","path","targetUrl","fn","schoolList","setSchoolList","lastRefresh","setlastRefresh","controller","AbortController","signal","abortSignal","fetchSchools","abort","getAcronym","Calendar","currentMonth","setCurrentMonth","initialOptions","keys","options","selectedDates","setSelectedDates","config","weekStartsOn","startDate","dateFns","startOfWeek","startOfMonth","endDate","endOfWeek","endOfMonth","onDateClick","event","dateValue","currentTarget","dataset","isValidDate","next","getNextOptionForDate","setOptionForDate","getGroupAndPositionForDate","currentOptionKey","optionKeys","indexOf","option","optionKey","posInOption","updatedSelections","removeDateFromSelectionList","addDateToSelectionList","isNaN","datesSelected","updatedGroup","index","slice","indexInGroup","colSpan","subMonths","faChevronLeft","addMonths","faChevronRight","dayNames","addDays","getWeekdayNameHeaders","monthGrid","tempRowData","dateIndex","differenceInDays","firstDayOfWeek","firstDayOfWeekTomorrow","color","backgroundColor","getMonth","data-date","getDate","isEqual","getMonthGrid","getRandomHtmlColor","random","scheduleOptions","getSchedules","optionProps","getScheduleOptions","listStyleType","margin","padding","routes","Admin","createBrowserHistory","configuredStore","hist","initialState","rootReducer","combineReducers","router","routerReducer","persistedReducer","persistReducer","store","createStore","applyMiddleware","logger","routerMiddleware","thunk","persistor","persistStore","configureStore","startListener","UniversalRouter","hash","replace","render","resolve","ReactDOM","client_id","redirect_uri","getElementById","currentLocation","getState","subscribe","previousLocation","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a24e0729.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import School from \"../../@types/school\";\n\n//API actions\nexport const REQUEST_SCHOOL = \"FETCH_SCHOOL\";\nexport const RECEIVE_SCHOOL = \"RECEIVE_SCHOOL\";\n\nexport const FETCH_ERROR = \"FETCH_ERROR\";\n\n// UI actions\nexport const SELECT_SCHOOL = \"SELECT_SCHOOL\";\nexport const INVALIDATE_SCHOOL = \"INVALIDATE_SCHOOL\";\n\nexport interface IState {\n    selectedSchool: {\n        isFetching: boolean;\n        didInvalidate: false;\n        data: School;\n    };\n}\n\ninterface ISelectSchoolAction {\n    type: typeof SELECT_SCHOOL;\n}\n\ninterface IReceiveSchoolAction {\n    type: typeof RECEIVE_SCHOOL;\n    school: School;\n    receivedAt: number;\n}\n\ninterface IRequestSchoolAction {\n    type: typeof REQUEST_SCHOOL;\n}\n\ninterface IInvalidateSchoolAction {\n    type: typeof INVALIDATE_SCHOOL;\n}\n\ninterface IFetchErrorAction {\n    type: typeof FETCH_ERROR;\n    message: string;\n}\n\n// interface DeleteMessageAction {\n//     type: typeof DELETE_MESSAGE;\n//     meta: {\n//         timestamp: number;\n//     };\n// }\n\nexport type SchoolActionTypes =\n    | ISelectSchoolAction\n    | IReceiveSchoolAction\n    | IRequestSchoolAction\n    | IInvalidateSchoolAction\n    | IFetchErrorAction;\n// | IReceiveSchoolsAction; // | DeleteMessageAction;\n","import {\n    SELECT_SCHOOL,\n    SchoolActionTypes,\n    FETCH_ERROR,\n    RECEIVE_SCHOOL,\n    INVALIDATE_SCHOOL\n    // ISchoolsByIdState\n} from \"./types\";\nimport School from \"../../@types/school\";\n\nexport function selectedSchoolReducer(\n    state = {\n        isFetching: false,\n        data: {}\n    },\n    action: SchoolActionTypes\n) {\n    switch (action.type) {\n        case SELECT_SCHOOL:\n            return Object.assign({}, state, {\n                isFetching: true\n            });\n\n        case RECEIVE_SCHOOL:\n            return Object.assign({}, state, {\n                isFetching: false,\n                data: action.school,\n                lastUpdated: action.receivedAt\n            });\n\n        case INVALIDATE_SCHOOL:\n            return Object.assign({}, state, {\n                isFetching: false,\n                data: {}\n            });\n\n        default:\n            return state;\n    }\n}\n\nexport function fetchErrorReducer(state = {}, action: SchoolActionTypes) {\n    if (action.type === FETCH_ERROR) {\n        return action.message;\n    } else {\n        return state;\n    }\n}\n","export enum TimeStates {\n    DAY_OFF = \"day off\",\n    OUTSIDE_SCHOOL_HOURS = \"outside school hours\",\n    SCHOOL_IN_CLASS_OUT = \"school is in session, but class is not\",\n    CLASS_IN_SESSION = \"class is in session\"\n}\n\nexport enum TimeComparisons {\n    IS_BEFORE = -1, //\"before\",\n    IS_DURING_OR_EXACTLY = 0, //\"during/exactly\",\n    IS_AFTER = 1 //\"after\"\n}\n","export default class Time {\n    public static fromMilliseconds(milliseconds: number): Time {\n        const hours = Math.floor(milliseconds / 1000 / 60 / 60);\n        milliseconds -= hours * 1000 * 60 * 60;\n        const minutes = Math.floor(milliseconds / 1000 / 60);\n        milliseconds -= minutes * 1000 * 60;\n        const seconds = Math.floor(milliseconds / 1000);\n        milliseconds -= seconds * 1000;\n\n        return new Time(hours, minutes, seconds);\n    }\n\n    public static fromDate(date: Date) {\n        return new Time(date.getHours(), date.getMinutes(), date.getSeconds());\n    }\n\n    public static fromString(time: string) {\n        const parts = time.split(\":\");\n        if (parts.length < 2 || parts.length > 3) {\n            //error\n        }\n        return new Time(\n            parseInt(parts[0], 10),\n            parseInt(parts[1], 10),\n            parts.length === 3 ? parseInt(parts[2], 10) : undefined\n        );\n    }\n\n    private hours: number;\n    private minutes: number;\n    private seconds: number;\n\n    constructor(hours: number, minutes: number, seconds?: number) {\n        this.hours = Math.abs(hours % 24);\n        this.minutes = Math.abs(minutes % 60);\n        this.seconds = Math.abs(seconds || 0 % 60);\n    }\n\n    public getHours() {\n        return this.hours;\n    }\n    public getMinutes() {\n        return this.minutes;\n    }\n    public getSeconds() {\n        return this.seconds;\n    }\n    public getMillisecondsTo(otherTime: Time) {\n        const hoursDiff = otherTime.getHours() - this.hours;\n        const minutesDiff = otherTime.getMinutes() - this.minutes;\n        const secondsDiff = otherTime.getSeconds() - this.seconds;\n\n        return hoursDiff * 60 * 60 * 1000 + minutesDiff * 60 * 1000 + secondsDiff * 1000;\n    }\n    public getTimeDeltaTo(otherTime: Time) {\n        return Time.fromMilliseconds(Math.abs(this.getMillisecondsTo(otherTime)));\n    }\n\n    public toString(excludeSeconds = false, use24HourTime = false) {\n        const hours = use24HourTime ? this.hours % 12 : this.hours;\n\n        let stringified =\n            this.hours.toString().padStart(2, \"0\") +\n            \":\" +\n            this.minutes.toString().padStart(2, \"0\");\n\n        if (!excludeSeconds) {\n            stringified += \":\" + this.seconds.toString().padStart(2, \"0\");\n        }\n\n        return stringified;\n    }\n\n    public isAM() {\n        return this.hours < 12 && this.minutes < 60 && this.seconds < 60;\n    }\n\n    public getFormattedString(excludeSeconds = false, use24HourTime = false) {\n        const ending = this.isAM() ? \" AM\" : \" PM\";\n        return this.toString(excludeSeconds) + (use24HourTime ? ending : \"\");\n    }\n\n    //this overrides the automatic serialization of Time Objects and makes them return a string and not a plain object (which is more annoying to parse back in and rwould require an extra factory method)\n    public toJSON() {\n        return this.toString();\n    }\n}\n","import Time from \"../@types/time\";\nimport School from \"../@types/school\";\nimport { TimeComparisons, TimeStates } from \"./enums\";\nimport ClassPeriod from \"../@types/classperiod\";\nimport BellSchedule from \"../@types/bellschedule\";\n\nexport function getValueIfKeyInList(list: string[], object: any) {\n    for (const key of list) {\n        if (object.hasOwnProperty(key)) {\n            return object[key];\n        }\n    }\n}\n\n//resource object\nexport function deconstructJsonApiResource(json: any) {\n    const data = {\n        type: json.type,\n        id: json.id,\n        ...(json.links !== undefined && {\n            endpoint: json.links.self\n        })\n    };\n    return Object.assign({}, data, json.attributes);\n}\n\nexport function getCurrentDate() {\n    return new Date();\n}\n\nexport function sortClassesByStartTime(classes: ClassPeriod[]) {\n    return classes.sort((a, b) => -a.getStartTime().getMillisecondsTo(b.getStartTime()));\n}\n\n/**\n * @returns a flag that represents the current chunk of time categorically\n */\nexport function getTimeStateForDateAtSchool(date: Date, school: School) {\n    const currentBellSchedule = school.getScheduleForDate(date);\n\n    //there is no schedule that applies today\n    if (!currentBellSchedule) {\n        return TimeStates.DAY_OFF;\n    }\n\n    const currentClassPeriod = currentBellSchedule.getClassPeriodForTime(\n        Time.fromDate(date)\n    );\n\n    //it is a school day but it is not school hours\n    if (!school.isInSession(date)) {\n        return TimeStates.OUTSIDE_SCHOOL_HOURS;\n    }\n\n    //the current time lies between the start of the first schedules class and the end of the last\n    else if (school.isInSession(date) && !currentClassPeriod) {\n        return TimeStates.SCHOOL_IN_CLASS_OUT;\n    }\n\n    //the current time lies within a scheduled class period\n    else if (currentClassPeriod !== undefined) {\n        return TimeStates.CLASS_IN_SESSION;\n    }\n}\n\n/**\n * @returns the next relevent time to count down to\n */\nexport function getNextImportantInfo(\n    date: Date,\n    school: School\n): [ClassPeriod, Time] | undefined {\n    const currentBellSchedule = school.getScheduleForDate(date);\n\n    //there is no schedule that applies today\n    if (!currentBellSchedule) {\n        return;\n    }\n\n    const classes = sortClassesByStartTime(currentBellSchedule.getAllClasses());\n    //loop through all classes in order until you get to the first time that has not passed\n    for (let i = 0; i < classes.length; i++) {\n        for (const time of [classes[i].getStartTime(), classes[i].getEndTime()]) {\n            if (Time.fromDate(date).getMillisecondsTo(time) >= 0) {\n                const nextClass =\n                    classes[i].stateForTime(Time.fromDate(date)) ===\n                    TimeComparisons.IS_DURING_OR_EXACTLY\n                        ? classes[i + 1]\n                        : classes[i];\n                return [nextClass, time];\n            }\n        }\n    }\n}\n\n/**\n * This export function checks if the current time is between the two given times\n * This is useful for checking which class period you are currently in or for checking if school is in session.\n *\n * @param {*} checkTime the time that the check results are returned for\n * @param {*} startTime the start time of the range to check\n * @param {*} endTimethe the end time of the range to check\n *\n * @returns -1 if checkTime is before range, 0 if checkTime is within range, 1 if checkTime is after range\n */\nexport function checkTimeRange(checkTime: Time, startTime: Time, endTime: Time) {\n    if (startTime.getMillisecondsTo(endTime) <= 0) {\n        //theres a problem\n    }\n    const startCheck = checkTime.getMillisecondsTo(startTime);\n    const endCheck = checkTime.getMillisecondsTo(endTime);\n\n    if (startCheck > 0 && endCheck > 0) {\n        return TimeComparisons.IS_BEFORE;\n    } else if (endCheck < 0 && endCheck < 0) {\n        return TimeComparisons.IS_AFTER;\n    } else {\n        return TimeComparisons.IS_DURING_OR_EXACTLY;\n    }\n}\n","import Time from \"./time\";\nimport { checkTimeRange, getValueIfKeyInList } from \"../utils/helpers\";\n\nexport default class ClassPeriod {\n    public static fromJson(json: any) {\n        const start = getValueIfKeyInList([\"startTime\", \"start_time\"], json);\n        const end = getValueIfKeyInList([\"endTime\", \"end_time\"], json);\n        return new ClassPeriod(\n            getValueIfKeyInList([\"name\", \"classPeriodName\", \"class_period_name\"], json),\n            start instanceof Time ? start : Time.fromString(start),\n            end instanceof Time ? end : Time.fromString(end),\n            new Date(getValueIfKeyInList([\"creationDate\", \"creation_date\"], json))\n        );\n    }\n    private name: string;\n    private startTime: Time;\n    private endTime: Time;\n    private creationDate: Date;\n\n    constructor(name: string, startTime: Time, endTime: Time, creationDate: Date) {\n        this.name = name;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.creationDate = creationDate;\n    }\n\n    public getName() {\n        return this.name;\n    }\n\n    public getStartTime() {\n        return this.startTime;\n    }\n\n    public getEndTime() {\n        return this.endTime;\n    }\n\n    public getDuration() {\n        return this.startTime.getTimeDeltaTo(this.endTime);\n    }\n\n    //remove me\n    public stateForTime(time: Time) {\n        return checkTimeRange(time, this.startTime, this.endTime);\n    }\n}\n","import ClassPeriod from \"./classperiod\";\nimport Time from \"./time\";\nimport { TimeComparisons } from \"../utils/enums\";\nimport { getValueIfKeyInList, sortClassesByStartTime } from \"../utils/helpers\";\nimport { parse } from \"date-fns\";\n\nexport default class BellSchedule {\n    public static fromJson(json: any) {\n        return new BellSchedule(\n            getValueIfKeyInList([\"id\", \"identifier\"], json),\n            getValueIfKeyInList([\"name\", \"full_name\", \"fullName\"], json),\n            getValueIfKeyInList([\"endpoint\"], json),\n            getValueIfKeyInList([\"dates\"], json).map((date: string) => parse(date)),\n            getValueIfKeyInList([\"classes\", \"meeting_times\"], json).map(\n                (meetingTime: any) => ClassPeriod.fromJson(meetingTime)\n            ),\n            getValueIfKeyInList([\"lastModified\", \"last_modified\"], json)\n            //display name\n        );\n    }\n\n    private id: string;\n    private name: string;\n    private endpoint: string;\n    private displayName?: string;\n    private dates: Date[];\n    private classes: ClassPeriod[];\n    private lastUpdatedDate: Date;\n\n    constructor(\n        id: string,\n        name: string,\n        endpoint: string,\n        dates: Date[],\n        classes: ClassPeriod[],\n        lastUpdatedDate: Date,\n        displayName?: string\n    ) {\n        this.id = id;\n        this.name = name;\n        this.endpoint = endpoint;\n        this.displayName = displayName;\n        this.dates = dates;\n        this.classes = classes;\n        this.lastUpdatedDate = lastUpdatedDate;\n    }\n\n    public getIdentifier() {\n        return this.id;\n    }\n\n    public getName() {\n        if (this.displayName) {\n            return this.displayName;\n        } else {\n            return this.name;\n        }\n    }\n\n    public getEndpoint() {\n        return this.endpoint;\n    }\n\n    public getDates() {\n        return this.dates;\n    }\n\n    public getAllClasses() {\n        return this.classes;\n    }\n\n    public numberOfClasses() {\n        return this.classes.length - 1;\n    }\n\n    public lastUpdated() {\n        return this.lastUpdatedDate;\n    }\n\n    public hasChangedSince(date: Date) {\n        return date.getTime() - this.lastUpdatedDate.getTime() > 0;\n    }\n\n    public getClassPeriodForTime(time: Time) {\n        for (const classPeriod of sortClassesByStartTime(this.classes)) {\n            if (classPeriod.stateForTime(time) === TimeComparisons.IS_DURING_OR_EXACTLY) {\n                return classPeriod;\n            }\n        }\n        return;\n    }\n}\n","import {\n    checkTimeRange,\n    deconstructJsonApiResource,\n    getValueIfKeyInList\n} from \"../utils/helpers\";\nimport Time from \"./time\";\nimport { TimeComparisons } from \"../utils/enums\";\nimport BellSchedule from \"./bellschedule\";\n\nexport default class School {\n    public static fromJson(json: any) {\n        const schedules = getValueIfKeyInList([\"schedules\"], json);\n        return new School(\n            getValueIfKeyInList([\"id\", \"identifier\"], json),\n            getValueIfKeyInList([\"ownerId\", \"owner_id\"], json),\n            getValueIfKeyInList([\"name\", \"fullName\", \"full_name\"], json),\n            getValueIfKeyInList([\"acronym\"], json),\n            getValueIfKeyInList([\"endpoint\"], json),\n            \"LA\",\n            schedules\n                ? schedules.map((schedule: any) => BellSchedule.fromJson(schedule))\n                : undefined,\n            getValueIfKeyInList([\"alternate_freeperiod_name\", \"passingPeriodName\"], json),\n            getValueIfKeyInList([\"creation_date\", \"creationDate\"], json),\n            getValueIfKeyInList([\"last_modified\", \"lastModified\"], json)\n        );\n    }\n\n    private id: string;\n    private ownerId: string;\n    private endpoint?: string;\n    private fullName: string;\n    private acronym: string;\n    private timeZone?: string;\n    private schedules?: BellSchedule[];\n    private passingPeriodName?: string;\n    private creationDate?: Date;\n    private lastUpdatedDate?: Date;\n\n    constructor(\n        id: string,\n        ownerId: string,\n        fullName: string,\n        acronym: string,\n        endpoint: string,\n        timeZone?: string,\n        schedules?: BellSchedule[],\n        passingPeriodName?: string,\n        creationDate?: Date,\n        lastUpdatedDate?: Date\n    ) {\n        this.id = id;\n        this.ownerId = ownerId;\n        this.endpoint = endpoint;\n        this.fullName = fullName;\n        this.acronym = acronym;\n        this.timeZone = timeZone;\n        this.schedules = schedules;\n        this.passingPeriodName = passingPeriodName;\n        this.creationDate = creationDate;\n        this.lastUpdatedDate = lastUpdatedDate;\n    }\n\n    public getIdentifier(): string {\n        return this.id;\n    }\n\n    public getOwnerIdentifier(): string {\n        return this.ownerId;\n    }\n\n    public getEndpoint() {\n        return this.endpoint;\n    }\n\n    public getSchedules() {\n        return this.schedules;\n    }\n\n    public getName() {\n        return this.fullName;\n    }\n\n    public getAcronym() {\n        return this.acronym;\n    }\n\n    public getPassingTimeName() {\n        return this.passingPeriodName;\n    }\n\n    public getTimezone() {\n        return this.timeZone;\n    }\n\n    public getCreationDate() {\n        return this.creationDate;\n    }\n\n    public lastUpdated() {\n        return this.lastUpdated;\n    }\n\n    public hasChangedSince(date: Date) {\n        if (this.lastUpdatedDate !== undefined) {\n            return date.getTime() - this.lastUpdatedDate.getTime() > 0;\n        } else {\n            return undefined;\n        }\n    }\n\n    //can also be used as isNoSchoolDay() by checking for undefined\n    public getScheduleForDate(date: Date) {\n        if (this.schedules) {\n            for (const schedule of this.schedules) {\n                if (\n                    schedule\n                        .getDates()\n                        .map((d: Date) => d.toDateString())\n                        .includes(date.toDateString())\n                ) {\n                    return schedule;\n                }\n            }\n            return null; //no schedule today\n        }\n        return; // no schedules defined\n    }\n\n    //remove\n    public hasSchedules() {\n        return this.schedules !== undefined;\n    }\n\n    //change input to a time\n    public isInSession(date: Date) {\n        const currentTime = Time.fromDate(date);\n        const currentSchedule = this.getScheduleForDate(date);\n\n        if (!currentSchedule) {\n            return false;\n        }\n        return (\n            checkTimeRange(\n                currentTime,\n                currentSchedule.getAllClasses()[0].getStartTime(),\n                currentSchedule\n                    .getAllClasses()\n                    [currentSchedule.numberOfClasses()].getEndTime()\n            ) === TimeComparisons.IS_DURING_OR_EXACTLY\n        );\n    }\n}\n","import { createTransform } from \"redux-persist\";\nimport { IState } from \"../store/schools/types\";\nimport School from \"../@types/school\";\n\nconst SchoolTransform = createTransform(\n    // transform state on its way to being serialized and persisted.\n    (inboundState: IState, key: any) => {\n        // convert mySet to an Array.\n        return {\n            ...inboundState,\n            selectedSchool: JSON.stringify(inboundState.selectedSchool)\n        };\n    },\n    // transform state being rehydrated\n    (outboundState: any, key: any) => {\n        // convert mySet back to a Set.\n        return {\n            ...outboundState,\n            selectedSchool: School.fromJson(outboundState.selectedSchool)\n        };\n    },\n    // define which reducers this transform gets called for.\n    { whitelist: [\"selectedSchoolReducer\"] }\n);\n\nexport default SchoolTransform;\n","// UI actions\nexport const SET_TIME_FORMAT = \"SET_TIME_FORMAT\";\n\nexport interface IState {\n    userSettings: {\n        use24HourTime: boolean;\n    };\n}\n\ninterface ISetTimeFormatAction {\n    type: typeof SET_TIME_FORMAT;\n    use24HourTime: boolean;\n}\n\n// interface IReceiveSchoolAction {\n//     type: typeof RECEIVE_SCHOOL;\n//     school: School;\n//     receivedAt: number;\n// }\n\n// interface IRequestSchoolAction {\n//     type: typeof REQUEST_SCHOOL;\n// }\n\n// interface IFetchErrorAction {\n//     type: typeof FETCH_ERROR;\n//     message: string;\n// }\n\n// // interface DeleteMessageAction {\n// //     type: typeof DELETE_MESSAGE;\n// //     meta: {\n// //         timestamp: number;\n// //     };\n// // }\n\nexport type UserSettingActionTypes = ISetTimeFormatAction;\n","import { UserSettingActionTypes, SET_TIME_FORMAT } from \"./types\";\n\nexport function userSettingsReducer(\n    state = {\n        use24HourTime: false\n    },\n    action: UserSettingActionTypes\n) {\n    switch (action.type) {\n        case SET_TIME_FORMAT:\n            return Object.assign({}, state, {\n                use24HourTime: action.use24HourTime\n            });\n        default:\n            return state;\n    }\n}\n","import { combineReducers, applyMiddleware, createStore } from \"redux\";\nimport { routerReducer, routerMiddleware } from \"redux-first-routing\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport logger from \"redux-logger\";\n\nimport { selectedSchoolReducer, fetchErrorReducer } from \"./schools/reducer\";\nimport SchoolTransform from \"../utils/typetransform\";\nimport { userSettingsReducer } from \"./usersettings/reducer\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    transforms: [SchoolTransform],\n    blacklist: [\"router\", \"error\"]\n};\n\nexport const configureStore = (hist: any, initialState = {}) => {\n    // Add the reducer, which adds location state to the store\n    const rootReducer = combineReducers({\n        selectedSchool: selectedSchoolReducer,\n        userSettings: userSettingsReducer,\n        error: fetchErrorReducer,\n        router: routerReducer // Convention is to use the \"router\" property\n    });\n\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    // Create the store\n    const store = createStore(\n        persistedReducer,\n        initialState,\n        applyMiddleware(logger, routerMiddleware(hist), thunk)\n    );\n\n    const persistor = persistStore(store);\n    return { store, persistor };\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\nimport Auth0Client from \"@auth0/auth0-spa-js/dist/typings/Auth0Client\";\n\ninterface IAuth0Context {\n    isAuthenticated: boolean;\n    user: any;\n    loading: boolean;\n    popupOpen: boolean;\n    loginWithPopup(options: PopupLoginOptions): Promise<void>;\n    handleRedirectCallback(): Promise<RedirectLoginResult>;\n    getIdTokenClaims(o?: getIdTokenClaimsOptions): Promise<IdToken>;\n    loginWithRedirect(o: RedirectLoginOptions): Promise<void>;\n    getTokenSilently(o?: GetTokenSilentlyOptions): Promise<string | undefined>;\n    getTokenWithPopup(o?: GetTokenWithPopupOptions): Promise<string | undefined>;\n    logout(o?: LogoutOptions): void;\n}\ninterface IAuth0ProviderOptions {\n    children: React.ReactElement;\n    onRedirectCallback?(result: RedirectLoginResult): void;\n}\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n    window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext<IAuth0Context | null>(null);\nexport const useAuth0 = () => useContext(Auth0Context)!;\nexport const Auth0Provider = ({\n    children,\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n    ...initOptions\n}: IAuth0ProviderOptions & Auth0ClientOptions) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [user, setUser] = useState();\n    const [auth0Client, setAuth0] = useState<Auth0Client>();\n    const [loading, setLoading] = useState(true);\n    const [popupOpen, setPopupOpen] = useState(false);\n\n    useEffect(() => {\n        const initAuth0 = async () => {\n            const auth0FromHook = await createAuth0Client(initOptions);\n            setAuth0(auth0FromHook);\n\n            if (window.location.search.includes(\"code=\")) {\n                const { appState } = await auth0FromHook.handleRedirectCallback();\n                onRedirectCallback(appState);\n            }\n\n            const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n            setIsAuthenticated(isAuthenticated);\n\n            if (isAuthenticated) {\n                const user = await auth0FromHook.getUser();\n                setUser(user);\n            }\n\n            setLoading(false);\n        };\n        initAuth0();\n        // eslint-disable-next-line\n    }, []);\n\n    const loginWithPopup = async (o: PopupLoginOptions) => {\n        setPopupOpen(true);\n        try {\n            await auth0Client!.loginWithPopup(o);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setPopupOpen(false);\n        }\n        const user = await auth0Client!.getUser();\n        setUser(user);\n        setIsAuthenticated(true);\n    };\n\n    const handleRedirectCallback = async () => {\n        setLoading(true);\n        const result = await auth0Client!.handleRedirectCallback();\n        const user = await auth0Client!.getUser();\n        setLoading(false);\n        setIsAuthenticated(true);\n        setUser(user);\n        return result;\n    };\n    return (\n        <Auth0Context.Provider\n            value={{\n                isAuthenticated,\n                user,\n                loading,\n                popupOpen,\n                loginWithPopup,\n                handleRedirectCallback,\n                getIdTokenClaims: (o: getIdTokenClaimsOptions | undefined) =>\n                    auth0Client!.getIdTokenClaims(o),\n                loginWithRedirect: (o: RedirectLoginOptions) =>\n                    auth0Client!.loginWithRedirect(o),\n                getTokenSilently: (o: GetTokenSilentlyOptions | undefined) =>\n                    auth0Client!.getTokenSilently(o),\n                getTokenWithPopup: (o: GetTokenWithPopupOptions | undefined) =>\n                    auth0Client!.getTokenWithPopup(o),\n                logout: (o: LogoutOptions | undefined) => auth0Client!.logout(o)\n            }}\n        >\n            {children}\n        </Auth0Context.Provider>\n    );\n};\n","export class Auth0 {\n    public static domain = \"classclock.auth0.com\";\n    public static clientId = \"Z5H5pk78OhW6naNZHnK6CI6EEKZoVipr\";\n    public static audience = \"https://api.classclock.app\";\n}\n\nexport const pages = {\n    main: \"/\",\n    fullSchedule: \"/schedule.html\",\n    settings: \"/settings.html\",\n    selectSchool: \"/select\",\n    loginCallback: \"/callback\",\n    admin: \"/admin\"\n};\n\nexport const URLs = {\n    github: \"https://github.com/MoralCode/ClassClock\",\n    slack:\n        \"https://join.slack.com/t/classclock/shared_invite/enQtNTE0MDkyNzAwNzU3LWNhMGUwODU2ZjhkYTYxMTgzNDE1OWEyMGY2OGNiNTBhOWM5NDVhZGUzNDVlNzRiZTE3NTNmODFjYWNkNDhmMDU\",\n    twitter: \"https://twitter.com/classclockapp\",\n    instagram: \"https://www.instagram.com/classclockapp/\"\n};\n","import React, { Component, CSSProperties } from \"react\";\n\ninterface ILinkProps {\n    destination: any;\n    className?: string;\n    style?: CSSProperties;\n    title?: string;\n    id?: string;\n}\n\nexport default class Link extends Component<ILinkProps, {}> {\n    render() {\n        return (\n            <a\n                className={this.props.className}\n                id={this.props.id}\n                style={Object.assign({}, this.props.style, { cursor: \"pointer\" })}\n                title={this.props.title}\n                href={\n                    typeof this.props.destination === \"function\"\n                        ? undefined\n                        : this.props.destination\n                }\n                onClick={\n                    typeof this.props.destination === \"function\"\n                        ? this.props.destination\n                        : undefined\n                }\n            >\n                {this.props.children}\n            </a>\n        );\n    }\n}\n","import React, { Component, CSSProperties } from \"react\";\nimport \"./Block.css\";\n\ninterface ITextProps {\n    className?: string;\n    style?: CSSProperties;\n}\nexport default class Block extends Component<ITextProps, {}> {\n    render() {\n        return (\n            <div\n                className={\n                    \"infoBlock\" + (this.props.className ? \" \" + this.props.className : \"\")\n                }\n                style={this.props.style}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","import React, { Component, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport \"../global.css\";\nimport Link from \"../components/Link\";\nimport Icon from \"../components/Icon\";\nimport Block from \"../components/Block/Block\";\nimport Time from \"../@types/time\";\nimport School from \"../@types/school\";\nimport { pages } from \"../utils/constants\";\nimport BellSchedule from \"../@types/bellschedule\";\nimport { IState } from \"../store/schools/types\";\nimport { getNextImportantInfo, getCurrentDate } from \"../utils/helpers\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface IAppProps {\n    selectedSchool: {\n        isFetching: boolean;\n        didInvalidate: false;\n        data: School;\n    };\n    dispatch: any;\n}\n\nconst App = (props: IAppProps) => {\n    const [currentDate, setDate] = useState(getCurrentDate());\n\n    const navigate = (to: string) => {\n        props.dispatch(push(to));\n    };\n\n    useEffect(() => {\n        const interval: NodeJS.Timeout = setInterval(() => {\n            setDate(getCurrentDate());\n        }, 500);\n\n        return () => clearInterval(interval);\n    }, [currentDate]);\n\n    const currentSchedule = props.selectedSchool.data.getScheduleForDate(currentDate);\n\n    let content: JSX.Element = <></>;\n\n    switch (currentSchedule) {\n        case undefined:\n            if (!props.selectedSchool.isFetching) {\n                props.dispatch(push(pages.selectSchool));\n            }\n            break;\n        case null:\n            content = <p>No School Today</p>;\n            break;\n        default:\n            const nextImportantInfo = getNextImportantInfo(\n                currentDate,\n                props.selectedSchool.data\n            );\n            const [nextClass, nextImportantTime] = nextImportantInfo\n                ? nextImportantInfo\n                : [undefined, undefined];\n\n            const currentClass = currentSchedule.getClassPeriodForTime(\n                Time.fromDate(currentDate)\n            );\n\n            content = (\n                <>\n                    <Block>\n                        <p>\n                            Today is a{\" \"}\n                            <Link\n                                // tslint:disable-next-line: jsx-no-lambda\n                                destination={() => navigate(pages.fullSchedule)}\n                                id=\"viewScheduleLink\"\n                            >\n                                {currentSchedule.getName()}\n                            </Link>\n                        </p>\n                    </Block>\n                    <Block>\n                        <p>You are currently in: </p>\n                        <p className=\"timeFont\" style={{ fontSize: \"30px\" }}>\n                            <b>\n                                {currentClass !== undefined\n                                    ? currentClass.getName()\n                                    : props.selectedSchool.data.getPassingTimeName()}\n                            </b>\n                        </p>\n                    </Block>\n                    <Block>\n                        <p>...which ends in:</p>\n                        {/* <h1 className=\"centered bottomSpace time bigger\" id=\"timeToEndOfClass\" /> */}\n                        <p className=\"timeFont\" style={{ fontSize: \"60px\" }}>\n                            <b>\n                                {nextImportantTime\n                                    ? Time.fromDate(currentDate)\n                                          .getTimeDeltaTo(nextImportantTime)\n                                          .getFormattedString()\n                                    : \"No Class\"}\n                            </b>\n                        </p>\n                        <p>Your next class period is: </p>\n                        <p className=\"timeFont\" style={{ fontSize: \"30px\" }}>\n                            <b>{nextClass ? nextClass.getName() : \"No Class\"}</b>\n                        </p>\n                    </Block>\n                </>\n            );\n            break;\n    }\n\n    return (\n        <div className=\"App\">\n            <Link\n                className=\"cornerNavButton smallIcon\"\n                // tslint:disable-next-line: jsx-no-lambda\n                destination={() => navigate(pages.settings)}\n            >\n                <FontAwesomeIcon icon={faCog} />\n            </Link>\n            <br />\n            <Block>\n                <p>It is currently: </p>\n                <p className=\"timeFont\" style={{ fontSize: \"40px\" }}>\n                    {Time.fromDate(currentDate).getFormattedString()}\n                </p>\n                <p>\n                    on{\" \"}\n                    <b>\n                        {currentDate.toLocaleDateString(\"en-US\", {\n                            weekday: \"long\",\n                            year: \"numeric\",\n                            month: \"short\",\n                            day: \"numeric\"\n                        })}\n                    </b>\n                </p>\n            </Block>\n\n            {content}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => {\n    const { selectedSchool } = state;\n    selectedSchool.data = School.fromJson(selectedSchool.data);\n    return { selectedSchool };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport IPageInterface from \"../utils/IPageInterface\";\n\nimport \"../global.css\";\nimport School from \"../@types/school\";\nimport { IState } from \"../store/schools/types\";\nimport Link from \"../components/Link\";\nimport { pages } from \"../utils/constants\";\nimport Icon from \"../components/Icon\";\nimport { getCurrentDate, sortClassesByStartTime } from \"../utils/helpers\";\nimport ClassPeriod from \"../@types/classperiod\";\nimport ScheduleEntry from \"../components/ScheduleEntry/ScheduleEntry\";\nimport List from \"../components/List/List\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface IAppProps {\n    selectedSchool: {\n        isFetching: boolean;\n        didInvalidate: false;\n        data: School;\n    };\n    dispatch: any;\n}\n\nconst Schedule = (props: IAppProps) => {\n    let content: JSX.Element = <></>;\n    const currentSchedule = props.selectedSchool.data.getScheduleForDate(\n        getCurrentDate()\n    );\n\n    switch (currentSchedule) {\n        case undefined:\n            props.dispatch(push(pages.selectSchool));\n            break;\n        case null:\n            content = <p>No School Today</p>;\n            break;\n        default:\n            content = (\n                <>\n                    <p>{currentSchedule.getName()}</p>\n                    {/* <List items={scheduleItems} /> */}\n                    <table>\n                        <thead>\n                            <tr>\n                                <td>\n                                    <b>Class</b>\n                                </td>\n                                <td>\n                                    <b>Time</b>\n                                </td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {sortClassesByStartTime(currentSchedule.getAllClasses()).map(\n                                (value: ClassPeriod) => (\n                                    <>\n                                        <tr>\n                                            <td>{value.getName()}</td>\n                                            <td>\n                                                {value.getStartTime().toString()} -{\" \"}\n                                                {value.getEndTime().toString()}\n                                            </td>\n                                        </tr>\n                                    </>\n                                )\n                            )}\n                        </tbody>\n                    </table>\n                </>\n            );\n            break;\n    }\n\n    return (\n        <div>\n            <Link\n                className=\"cornerNavButton smallIcon\"\n                // tslint:disable-next-line: jsx-no-lambda\n                destination={() => props.dispatch(push(pages.main))}\n            >\n                <FontAwesomeIcon icon={faHome} />\n            </Link>\n            <br />\n            <p style={{ fontSize: \"30px\" }}>\n                <b>{props.selectedSchool.data.getName()}</b>\n            </p>\n\n            {content}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => {\n    const { selectedSchool } = state;\n    selectedSchool.data = School.fromJson(selectedSchool.data);\n    return { selectedSchool };\n};\n\nexport default connect(mapStateToProps)(Schedule);\n","export default class ClassClockService {\n    public static baseURL: string = \"https://api.classclock.app/v0\";\n\n    static getSchoolsList = async (params?: any): Promise<Response> => {\n        return await fetch(\n            ClassClockService.baseURL + \"/schools/\",\n            ClassClockService.getHeaders(\"GET\", params)\n        );\n    };\n\n    static getSchool = async (schoolId: string, params?: any): Promise<Response> => {\n        return await fetch(\n            ClassClockService.baseURL + \"/school/\" + schoolId + \"/\",\n            ClassClockService.getHeaders(\"GET\", params)\n        );\n    };\n\n    static getSchedulesListForSchool = async (\n        schoolId: string,\n        params?: any\n    ): Promise<Response> => {\n        return await fetch(\n            ClassClockService.baseURL + \"/school/\" + schoolId + \"/bellschedules/\",\n            ClassClockService.getHeaders(\"GET\", params)\n        );\n    };\n\n    static getDetailedScheduleForSchool = async (\n        schoolId: string,\n        scheduleId: string,\n        params?: any\n    ): Promise<Response> => {\n        return await fetch(\n            ClassClockService.baseURL +\n                \"/school/\" +\n                schoolId +\n                \"/bellschedule/\" +\n                scheduleId +\n                \"/\",\n            ClassClockService.getHeaders(\"GET\", params)\n        );\n    };\n\n    static validateResponse = async (\n        call: Promise<Response>,\n        onError?: (error: Error) => void\n    ) => {\n        return await call.then(\n            (response: Response) => {\n                if (response.ok) {\n                    return response.json();\n                }\n            },\n            // Do not use catch, because that will also catch\n            // any errors in the dispatch and resulting render,\n            // causing a loop of 'Unexpected batch number' errors.\n            // https://github.com/facebook/react/issues/6895\n            (error: Error) => {\n                console.log(onError);\n                onError ? onError(error) : console.log(\"An error occurred: \", error);\n            }\n        );\n    };\n\n    private static getHeaders = (\n        method: string,\n        authToken?: string,\n        params?: any\n    ): { method: string; headers: Headers } => {\n        const parameters = authToken\n            ? { ...params, Authorization: \"Bearer \" + authToken }\n            : params;\n        return Object.assign(\n            {},\n            {\n                method,\n                headers: new Headers({ Accept: \"application/vnd.api+json\" })\n            },\n            parameters\n        );\n    };\n}\n","import {\n    SELECT_SCHOOL,\n    SchoolActionTypes,\n    FETCH_ERROR,\n    RECEIVE_SCHOOL,\n    REQUEST_SCHOOL,\n    INVALIDATE_SCHOOL\n} from \"./types\";\nimport { Dispatch } from \"redux\";\nimport ClassClockService from \"../../services/classclock\";\nimport School from \"../../@types/school\";\nimport BellSchedule from \"../../@types/bellschedule\";\nimport { deconstructJsonApiResource } from \"../../utils/helpers\";\n\nfunction requestSchool(): SchoolActionTypes {\n    return {\n        type: SELECT_SCHOOL\n    };\n}\n\nexport function invalidateSchool(): SchoolActionTypes {\n    return {\n        type: INVALIDATE_SCHOOL\n    };\n}\n\nfunction receiveSchool(json: any): SchoolActionTypes {\n    return {\n        type: RECEIVE_SCHOOL,\n        school: School.fromJson(json),\n        receivedAt: Date.now()\n    };\n}\n\nfunction fetchError(message: string): SchoolActionTypes {\n    return {\n        type: FETCH_ERROR,\n        message\n    };\n}\n\nexport function selectSchool(schoolId: string) {\n    return async (dispatch: Dispatch) => {\n        dispatch(requestSchool());\n\n        const onError = (error: Error) => {\n            console.log(\"Caught an error: \", error.message);\n            dispatch(fetchError(error.message));\n        };\n\n        const school = ClassClockService.validateResponse(\n            ClassClockService.getSchool(schoolId),\n            onError\n        );\n\n        const schedules = ClassClockService.validateResponse(\n            ClassClockService.getSchedulesListForSchool(schoolId),\n            onError\n        );\n\n        Promise.all([school, schedules]).then(\n            (result: any) => {\n                const [schoolResult, scheduleResult] = result;\n\n                //result = [school() result, schedules() result]\n                //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all#Using_Promise.all\n\n                const scheduleDataList: Array<Promise<any>> = [];\n\n                for (const schedule of scheduleResult.data) {\n                    const scheduleId = schedule.id;\n                    // const sched_uri = schedule.links.self;\n                    const scheduleRequest = ClassClockService.validateResponse(\n                        ClassClockService.getDetailedScheduleForSchool(\n                            schoolId,\n                            scheduleId\n                        ),\n                        onError\n                    );\n\n                    scheduleDataList.push(scheduleRequest);\n                }\n\n                Promise.all(scheduleDataList).then(\n                    (schedulesList: any) => {\n                        schoolResult.data.attributes.schedules = schedulesList.map(\n                            (schedule: any) => deconstructJsonApiResource(schedule.data)\n                        );\n                        dispatch(\n                            receiveSchool(deconstructJsonApiResource(schoolResult.data))\n                        );\n                    },\n                    (error: Error) => onError(error)\n                );\n            },\n            (error: Error) => onError(error)\n        );\n    };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport IPageInterface from \"../utils/IPageInterface\";\nimport \"../global.css\";\nimport { IState } from \"../store/schools/types\";\nimport { IState as UserSettingsIState } from \"../store/usersettings/types\";\nimport School from \"../@types/school\";\nimport Link from \"../components/Link\";\nimport { pages } from \"../utils/constants\";\nimport Icon from \"../components/Icon\";\nimport { URLs } from \"../utils/constants\";\nimport { setTimeFormatPreference } from \"../store/usersettings/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub, faTwitter, faInstagram } from \"@fortawesome/free-brands-svg-icons\";\nimport { faHome, faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { useAuth0 } from \"../react-auth0-wrapper\";\nimport format from \"date-fns/format\";\nimport { selectSchool, invalidateSchool } from \"../store/schools/actions\";\n\nexport interface ISettingProps {\n    selectedSchool: any;\n    userSettings: { use24HourTime: boolean }; //this is duplicated. ugh\n    dispatch: any;\n}\n\nconst Settings = (props: ISettingProps) => {\n    const { logout, user, getTokenSilently } = useAuth0();\n\n    const navigate = (to: string) => {\n        props.dispatch(push(to));\n    };\n\n    if (props.selectedSchool.data === {} && !props.selectedSchool.isFetching) {\n        navigate(pages.selectSchool);\n    }\n\n    return (\n        <div>\n            <Link\n                className=\"cornerNavButton smallIcon\"\n                // tslint:disable-next-line: jsx-no-lambda\n                destination={() => navigate(pages.main)}\n            >\n                <FontAwesomeIcon icon={faHome} />\n            </Link>\n            <br />\n\n            <h1>Settings</h1>\n            {user ? (\n                <span>\n                    Hello <b>{user.name || user.email}</b> (\n                    <Link\n                        // tslint:disable-next-line: jsx-no-lambda\n                        destination={() => {\n                            logout();\n                            props.dispatch(invalidateSchool());\n                        }}\n                        title=\"Log Out\"\n                    >\n                        <FontAwesomeIcon icon={faSignOutAlt} /> Log Out\n                    </Link>\n                    )\n                </span>\n            ) : (\n                undefined\n            )}\n\n            <p>\n                {props.selectedSchool.isFetching ? (\n                    <span>Loading School...</span>\n                ) : (\n                    <b>{props.selectedSchool.data.getName() + \" \"}</b>\n                )}\n                <br />\n                <em className=\"smallerText\">\n                    (\n                    <Link\n                        // tslint:disable-next-line: jsx-no-lambda\n                        destination={() => navigate(pages.selectSchool)}\n                        title=\"Change School\"\n                    >\n                        Change School\n                    </Link>\n                    )\n                </em>\n                {user && props.selectedSchool.data.getOwnerIdentifier() === user.sub ? (\n                    <em className=\"smallerText\">\n                        (\n                        <Link\n                            // tslint:disable-next-line: jsx-no-lambda\n                            destination={() => navigate(pages.admin)}\n                            title=\"Manage School\"\n                        >\n                            Manage School\n                        </Link>\n                        )\n                    </em>\n                ) : (\n                    undefined\n                )}\n                <br />\n                <em className=\"smallerText\">\n                    Updated:{\" \"}\n                    {format(\n                        new Date(props.selectedSchool.lastUpdated),\n                        \"MMM D YYYY h:mm:ss a\"\n                    ) + \" \"}\n                </em>\n                {!props.selectedSchool.isFetching ? (\n                    <em className=\"smallerText\">\n                        (\n                        <Link\n                            // tslint:disable-next-line: jsx-no-lambda\n                            destination={() =>\n                                props.dispatch(\n                                    selectSchool(\n                                        props.selectedSchool.data.getIdentifier()\n                                    )\n                                )\n                            }\n                            title=\"Reload Schedule\"\n                        >\n                            Refresh\n                        </Link>\n                        )\n                    </em>\n                ) : (\n                    undefined\n                )}\n            </p>\n            <label>\n                <b>Use 24-hour Time?</b>{\" \"}\n                <input\n                    type=\"checkbox\"\n                    checked={props.userSettings.use24HourTime}\n                    // tslint:disable-next-line: jsx-no-lambda\n                    onChange={() => {\n                        props.dispatch(\n                            setTimeFormatPreference(!props.userSettings.use24HourTime)\n                        );\n                    }}\n                />\n            </label>\n            <br />\n            <p>\n                <em className=\"smallerText\">\n                    Settings are automatically saved on your device\n                </em>\n            </p>\n\n            <p style={{ marginTop: \"20vh\" }}>Follow ClassClock:</p>\n            <ul className=\"footer__social\">\n                <li>\n                    <Link destination={URLs.github}>\n                        <FontAwesomeIcon icon={faGithub} />\n                    </Link>\n                </li>\n                <li>\n                    <Link destination={URLs.twitter}>\n                        <FontAwesomeIcon icon={faTwitter} />\n                    </Link>\n                </li>\n                <li>\n                    <Link destination={URLs.instagram}>\n                        <FontAwesomeIcon icon={faInstagram} />\n                    </Link>\n                </li>\n            </ul>\n            <p id=\"credits\">\n                Created by: <a href=\"https://www.adriancedwards.com\">Adrian Edwards</a>{\" \"}\n                and <a href=\"https://nbdeg.com/\">Nick DeGroot</a>\n                <br />\n                Idea by: <a href=\"https://twitter.com/MrKumprey\">Dan Kumprey</a>\n            </p>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState & UserSettingsIState) => {\n    const { selectedSchool, userSettings } = state;\n    return {\n        selectedSchool: Object.assign({}, selectedSchool, {\n            data: School.fromJson(selectedSchool.data)\n        }),\n        userSettings\n    };\n};\n\nexport default connect(mapStateToProps)(Settings);\n","import { UserSettingActionTypes, SET_TIME_FORMAT } from \"./types\";\n\nexport function setTimeFormatPreference(use24HourTime: boolean): UserSettingActionTypes {\n    return {\n        type: SET_TIME_FORMAT,\n        use24HourTime\n    };\n}\n","import React, { useEffect } from \"react\";\nimport { useAuth0 } from \"../react-auth0-wrapper\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }: any) => {\n    const { isAuthenticated, loginWithRedirect } = useAuth0();\n\n    useEffect(() => {\n        const fn = async () => {\n            if (!isAuthenticated) {\n                await loginWithRedirect({\n                    appState: { targetUrl: path }\n                });\n            }\n        };\n        fn();\n    }, [isAuthenticated, loginWithRedirect, path]);\n\n    const Render = (props: any) =>\n        isAuthenticated === true ? <Component {...props} /> : null;\n\n    return <Render />;\n};\n\nexport default PrivateRoute;\n","import React, { Component, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport \"../../global.css\";\nimport \"./SchoolSelect.css\";\n\nimport { selectSchool } from \"../../store/schools/actions\";\nimport { useAuth0 } from \"../../react-auth0-wrapper\";\nimport School from \"../../@types/school\";\nimport ClassClockService from \"../../services/classclock\";\nimport { pages } from \"../../utils/constants\";\nimport { IState } from \"../../store/schools/types\";\nimport { deconstructJsonApiResource } from \"../../utils/helpers\";\n\nexport interface ISelectProps {\n    selectedSchool: any;\n    dispatch: any;\n}\n\nconst SchoolSelect = (props: ISelectProps) => {\n    const [schoolList, setSchoolList] = useState([]);\n    const [lastRefresh, setlastRefresh] = useState(0);\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        if (\n            schoolList.length === 0 &&\n            // isFetching === false &&\n            Math.abs(new Date().getTime() - lastRefresh) > 120000 //120000 ms\n        ) {\n            const fetchSchools = async (abortSignal: AbortSignal) => {\n                ClassClockService.validateResponse(\n                    ClassClockService.getSchoolsList({\n                        signal: abortSignal\n                    })\n                ).then((json: any) => {\n                    setSchoolList(\n                        json.data.map((value: any) =>\n                            School.fromJson(deconstructJsonApiResource(value))\n                        )\n                    );\n\n                    setlastRefresh(new Date().getTime());\n                });\n            };\n            fetchSchools(signal);\n        }\n\n        return () => {\n            controller.abort();\n        };\n    }, []);\n\n    const list = schoolList.map((school: School) => (\n        <li\n            key={school.getIdentifier()}\n            onClick={() => {\n                props.dispatch(selectSchool(school.getIdentifier()));\n                props.dispatch(push(pages.main));\n            }}\n        >\n            <span className=\"schoolAcronym\">{school.getAcronym()}</span>\n            <br />\n            <span className=\"schoolName\">{school.getName()}</span>\n        </li>\n    ));\n\n    return (\n        <div>\n            <h2>Please select a school</h2>\n            {schoolList.length === 0 ? (\n                <span>Loading...</span>\n            ) : (\n                <ul className=\"schoolSelectionList\">{list}</ul>\n            )}\n            <p><a href=\"https://form.jotform.com/200374910475049\">Nominate your School</a></p>\n\n            {/* <a onClick={}>Refresh</a> */}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => {\n    const { selectedSchool } = state;\n    return { selectedSchool };\n};\nexport default connect(mapStateToProps)(SchoolSelect);\n","import React, { useState } from \"react\";\nimport \"./Calendar.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronRight, faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport dateFns from \"date-fns\";\nimport Link from \"../Link\";\n\nexport interface IScheduleDates {\n    [key: string]: { name: string; color: string; dates?: number[] };\n}\n\nexport interface ICalendarProps {\n    options: IScheduleDates;\n}\n\nconst Calendar = (props: ICalendarProps) => {\n    const [currentMonth, setCurrentMonth] = useState(new Date());\n    const initialOptions: { [key: string]: number[] } = {};\n    for (const option of Object.keys(props.options)) {\n        initialOptions[option] = [];\n    }\n    const [selectedDates, setSelectedDates] = useState(initialOptions);\n\n    const config = { weekStartsOn: 1 };\n    const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), config);\n    const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), config);\n\n    const onDateClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        const dateValue: Date = new Date(parseInt(event.currentTarget.dataset.date!, 10));\n        if (isValidDate(dateValue)) {\n            const next = getNextOptionForDate(dateValue);\n            setOptionForDate(dateValue, next);\n        } else {\n            console.log(\"invalid date\");\n        }\n\n        // event.currentTarget.value = props.options[(key + 1) % props.options.length];\n    };\n\n    const getNextOptionForDate = (date: Date) => {\n        const location = getGroupAndPositionForDate(date);\n        const currentOptionKey = location ? location[0] : undefined;\n        const optionKeys = Object.keys(props.options);\n\n        if (!location) {\n            return optionKeys[0];\n        } else if (\n            currentOptionKey &&\n            currentOptionKey === optionKeys[optionKeys.length - 1]\n        ) {\n            return;\n        } else if (currentOptionKey) {\n            return optionKeys[optionKeys.indexOf(currentOptionKey) + 1];\n        }\n    };\n\n    const setOptionForDate = (date: Date, option?: string) => {\n        const location = getGroupAndPositionForDate(date);\n\n        if (location && option) {\n            const [optionKey, posInOption] = location;\n\n            if (optionKey !== option) {\n                let updatedSelections = selectedDates;\n                updatedSelections = removeDateFromSelectionList(\n                    updatedSelections,\n                    optionKey,\n                    posInOption\n                );\n                updatedSelections = addDateToSelectionList(\n                    updatedSelections,\n                    option,\n                    date\n                );\n                setSelectedDates(updatedSelections);\n            }\n        } else if (!location && option) {\n            setSelectedDates(addDateToSelectionList(selectedDates, option, date));\n        } else if (location && !option) {\n            const [optionKey, posInOption] = location;\n            setSelectedDates(\n                removeDateFromSelectionList(selectedDates, optionKey, posInOption)\n            );\n        }\n    };\n\n    //https://stackoverflow.com/a/1353711\n    const isValidDate = (d: Date) => {\n        return d instanceof Date && !isNaN(d.getTime());\n    };\n\n    const addDateToSelectionList = (\n        datesSelected: { [key: string]: number[] },\n        option: string,\n        date: Date\n    ) => {\n        const updatedGroup: { [key: string]: number[] } = {};\n        updatedGroup[option] = [...datesSelected[option], date.getTime()];\n        const result = Object.assign({}, datesSelected, updatedGroup);\n\n        return result;\n    };\n\n    const removeDateFromSelectionList = (\n        datesSelected: { [key: string]: number[] },\n        option: string,\n        index: number\n    ) => {\n        const updatedGroup: { [key: string]: number[] } = {};\n        updatedGroup[option] = [\n            ...datesSelected[option].slice(0, index),\n            ...datesSelected[option].slice(index + 1)\n        ];\n\n        const result = Object.assign({}, datesSelected, updatedGroup);\n\n        return result;\n    };\n\n    const getGroupAndPositionForDate = (date: Date): [string, number] | undefined => {\n        // const groups: Array<[string, number]> = [];\n        for (const key in selectedDates) {\n            if (selectedDates.hasOwnProperty(key)) {\n                const indexInGroup = selectedDates[key].indexOf(date.getTime());\n                if (indexInGroup !== -1) {\n                    return [key, indexInGroup];\n                }\n            }\n        }\n\n        return;\n        // const dateInUnixTime = date.getTime();\n        // const index = selectedDates[key].indexOf(dateInUnixTime);\n    };\n\n    const getWeekdayNameHeaders = () => {\n        const dayNames = [];\n\n        for (let i = 0; i < 7; i++) {\n            dayNames.push(dateFns.format(dateFns.addDays(startDate, i), \"ddd\"));\n        }\n        return dayNames;\n    };\n\n    const getMonthGrid = () => {\n        const monthGrid = [];\n        let tempRowData = [];\n\n        for (\n            let dateIndex = 0;\n            dateIndex <= dateFns.differenceInDays(endDate, startDate);\n            dateIndex++\n        ) {\n            const date = dateFns.addDays(startDate, dateIndex);\n            const firstDayOfWeek = dateFns.startOfWeek(date, config);\n            const firstDayOfWeekTomorrow = dateFns.startOfWeek(\n                dateFns.addDays(date, 1),\n                config\n            );\n\n            const location = getGroupAndPositionForDate(date);\n            const currentOptionKey = location ? location[0] : undefined;\n\n            const color = currentOptionKey\n                ? { backgroundColor: props.options[currentOptionKey].color }\n                : undefined;\n\n            tempRowData.push(\n                <td key={\"date\" + dateIndex}>\n                    <span\n                        onClick={event => onDateClick(event)}\n                        className={\n                            dateFns.getMonth(date) !== dateFns.getMonth(currentMonth)\n                                ? \"disabled\"\n                                : undefined\n                        }\n                        data-date={date.getTime()}\n                        style={color}\n                    >\n                        {date.getDate()}\n                    </span>\n                </td>\n            );\n\n            if (!dateFns.isEqual(firstDayOfWeek, firstDayOfWeekTomorrow)) {\n                monthGrid.push(<tr key={\"weekBegin\" + dateIndex}>{tempRowData}</tr>);\n                tempRowData = [];\n            }\n        }\n        return monthGrid;\n    };\n\n    return (\n        <table className=\"calendarGrid\">\n            <thead>\n                <tr>\n                    <th colSpan={7}>\n                        <Link\n                            destination={() =>\n                                setCurrentMonth(dateFns.subMonths(currentMonth, 1))\n                            }\n                            className=\"smallIcon\"\n                        >\n                            <FontAwesomeIcon icon={faChevronLeft} />\n                        </Link>\n                        <span id=\"monthDisplay\">\n                            {dateFns.format(currentMonth, \"MMMM YYYY\")}\n                        </span>\n                        <Link\n                            destination={() =>\n                                setCurrentMonth(dateFns.addMonths(currentMonth, 1))\n                            }\n                            className=\"smallIcon\"\n                        >\n                            <FontAwesomeIcon icon={faChevronRight} />\n                        </Link>\n                    </th>\n                </tr>\n                <tr>\n                    {getWeekdayNameHeaders().map((value: string, index: number) => (\n                        <td key={index}>{value}</td>\n                    ))}\n                </tr>\n            </thead>\n            <tbody>{getMonthGrid()}</tbody>\n        </table>\n    );\n};\n\nexport default Calendar;\n","import React, { Component, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push } from \"redux-first-routing\";\nimport \"../global.css\";\nimport School from \"../@types/school\";\nimport { pages } from \"../utils/constants\";\nimport BellSchedule from \"../@types/bellschedule\";\nimport { IState } from \"../store/schools/types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { useAuth0 } from \"../react-auth0-wrapper\";\nimport Calendar, { IScheduleDates } from \"../components/Calendar/Calendar\";\n\nexport interface IAdminProps {\n    selectedSchool: {\n        isFetching: boolean;\n        didInvalidate: false;\n        data: School;\n    };\n    dispatch: any;\n}\n\nconst Admin = (props: IAdminProps) => {\n    const { user, getTokenSilently } = useAuth0();\n\n    const navigate = (to: string) => {\n        props.dispatch(push(to));\n    };\n\n    // if (\n    //     user === undefined ||\n    //     props.selectedSchool.data.getOwnerIdentifier() !== user.sub\n    // ) {\n    //     //user does not own school\n    //     navigate(pages.main);\n    // }\n\n    //https://stackoverflow.com/a/1484514\n    const getRandomHtmlColor = () => {\n        const letters = \"0123456789ABCDEF\";\n        let color = \"#\";\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    };\n\n    const getScheduleOptions = () => {\n        const schedules = props.selectedSchool.data.getSchedules();\n        const optionProps: IScheduleDates = {};\n        if (schedules !== undefined) {\n            for (const schedule of schedules) {\n                optionProps[schedule.getIdentifier()] = {\n                    color: getRandomHtmlColor(),\n                    name: schedule.getName()\n                };\n            }\n        }\n        return optionProps;\n    };\n\n    const scheduleOptions = getScheduleOptions();\n    const key = [];\n    for (const option in scheduleOptions) {\n        if (scheduleOptions.hasOwnProperty(option)) {\n            key.push(\n                <li style={{ backgroundColor: scheduleOptions[option].color }}>\n                    {scheduleOptions[option].name}\n                </li>\n            );\n        }\n    }\n    return (\n        <div>\n            <h1>Admin</h1>\n            <Calendar options={scheduleOptions} />\n            <ul\n                style={{\n                    listStyleType: \"none\",\n                    margin: 0,\n                    padding: 0\n                }}\n            >\n                {key}\n            </ul>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => {\n    const { selectedSchool } = state;\n    selectedSchool.data = School.fromJson(selectedSchool.data);\n    return { selectedSchool };\n};\n\nexport default connect(mapStateToProps)(Admin);\n","import React from \"react\";\nimport App from \"../pages/App\";\nimport Schedule from \"../pages/Schedule\";\nimport Settings from \"../pages/Settings\";\nimport PrivateRoute from \"../components/PrivateRoute\";\nimport SchoolSelect from \"../pages/SchoolSelect/SchoolSelect\";\nimport { pages } from \"./constants\";\nimport Admin from \"../pages/Admin\";\n\nexport const routes = [\n    {\n        path: pages.main,\n        action: () => <App />\n    },\n    {\n        path: pages.fullSchedule,\n        action: () => <Schedule />\n    },\n    {\n        path: pages.settings,\n        action: () => <Settings />\n    },\n    {\n        path: pages.selectSchool,\n        action: () => <SchoolSelect />\n    },\n    {\n        path: pages.admin,\n        action: () => <PrivateRoute component={Admin} path={pages.admin} />\n    },\n    {\n        path: pages.loginCallback,\n        action: () => <p>Redirecting...</p>\n    }\n];\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { configureStore } from \"./store/store\";\nimport { createBrowserHistory, startListener, push, replace } from \"redux-first-routing\";\nimport UniversalRouter from \"universal-router\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Auth0Provider } from \"./react-auth0-wrapper\";\nimport { Auth0, pages } from \"./utils/constants\";\nimport { routes } from \"./utils/routes\";\n\n// Create the history object\nconst history = createBrowserHistory();\n\n// Create the store, passing it the history object\nconst configuredStore = configureStore(history); //createStore(combineReducers(reducers), applyMiddleware(thunk));\n\n// Start the history listener, which automatically dispatches actions to keep the store in sync with the history\nstartListener(history, configuredStore.store);\n\n// Create the router\nconst router = new UniversalRouter(routes);\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = (appState: any) => {\n    // Temporary Firefox workaround: https://github.com/auth0/auth0-spa-js/blob/master/FAQ.md\n    window.location.hash = window.location.hash; // eslint-disable-line no-self-assign\n\n    configuredStore.store.dispatch(\n        replace(\n            appState && appState.targetUrl ? appState.targetUrl : window.location.pathname\n        )\n    );\n};\n\n// Create the reactive render function\nfunction render(pathname: string) {\n    router.resolve(pathname).then((component: any) => {\n        // console.log(component);\n\n        ReactDOM.render(\n            <Provider store={configuredStore.store}>\n                <PersistGate loading={null} persistor={configuredStore.persistor}>\n                    <Auth0Provider\n                        domain={Auth0.domain}\n                        client_id={Auth0.clientId}\n                        audience={Auth0.audience}\n                        redirect_uri={pages.loginCallback}\n                        onRedirectCallback={onRedirectCallback}\n                    >\n                        {component}\n                    </Auth0Provider>\n                </PersistGate>\n            </Provider>,\n            document.getElementById(\"root\")\n        );\n    });\n}\n\n// Get the current pathname\nlet currentLocation = configuredStore.store.getState().router.pathname;\n\n// Subscribe to the store location\nconst unsubscribe = configuredStore.store.subscribe(() => {\n    const previousLocation = currentLocation;\n    currentLocation = configuredStore.store.getState().router.pathname;\n\n    if (previousLocation !== currentLocation) {\n        console.log(\n            \"Some deep nested property changed from\",\n            previousLocation,\n            \"to\",\n            currentLocation\n        );\n        render(currentLocation);\n    }\n});\n\nrender(currentLocation);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}